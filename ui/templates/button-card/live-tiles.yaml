# METROLOGY FOR HOME ASSISTANT
# Button Card Templates
# Made by Madelena Mak 2022


# LIVE TILES

# Live Tile Card
# This is the base of various tiles.

live_tile_card:
  variables:
    aspect_ratio: 1/1
  color_type: card
  size: 20px
  show_state: true
  show_label: true
  state:
    - value: 'off'
      styles:
        card:
          - background-color: var(--ha-card-background)
        state:
          - color: var(--primary-text-color)
        name:
          - color: var(--primary-text-color)
        label:
          - color: var(--primary-text-color)
          - opacity: 0.67
    - value: unavailable
      styles:
        card:
          - background-color: var(--ha-card-background)
        state:
          - color: var(--disabled-text-color)
        name:
          - color: var(--disabled-text-color)
        label:
          - color: var(--disabled-text-color)
          - opacity: 0.67
    - operator: default
      styles:
        card:
          - background-color: var(--ha-card-background)
        state:
          - color: var(--primary-text-color)
        name:
          - color: var(--primary-text-color)
        label:
          - color: var(--primary-text-color)
          - opacity: 0.67
  state_display: '[[[ if (entity != undefined) { return entity.state.replace("_", " ") } ]]]'
  hold_action:
    action: more-info
  styles:
    grid:
      - grid-template-areas: |
          "s s"
          "l l"
          "n i"
      - grid-template-columns: 1fr min-content
      - grid-template-rows: min-content auto min-content
    card:
      - aspect-ratio: '[[[ return variables.aspect_ratio ]]]'
      - padding: 0
    name:
      - font-size: var(--body-font-size)
      - padding: 4px 4px 10px 12px
      - white-space: normal
      - text-align: left
      - justify-self: start
      - align-self: end
    state:
      - font-size: var(--h3-font-size)
      - justify-self: start
      - padding: 4px 12px 0px 12px
      - font-weight: var(--h3-font-weight)
      - align-self: start
      - text-overflow: clip
      - display: -webkit-box
      - -webkit-line-clamp: 2
      - -webkit-box-orient: vertical
      - text-transform: capitalize
    img_cell:
      - align-self: end
      - text-align: right
      - padding: 4px 8px 4px 4px
      - height: 28px
    label:
      - font-size: var(--body-font-size)
      - justify-self: start
      - padding: 0px 12px
      - align-self: start
      - opacity: 0.67
      - white-space: normal
      - text-align: left
      - height: 100%


# Live Tile

live_tile:
  template: live_tile_card
  styles:
    grid:
      - grid-template-areas: '". i s ." "n n l l"'
      - grid-template-columns: auto min-content min-content auto
      - grid-template-rows: auto 16px 0
    card:
      - background: var(--ha-card-background)
    icon:
      - color: var(--primary-text-color)
      - width: 40px
      - height: 40px
      - margin: 0
    img_cell:
      - height: 40px
      - align-self: center
      - justify-self: end
      - padding: 8px 0 0 0
    state:
      - color: var(--primary-text-color)
      - font-size: var(--h2-font-size)
      - font-weight: var(--h2-font-weight)
      - align-self: center
      - justify-self: start
      - padding: 4px 0px 2px 8px
    name:
      - color: var(--primary-text-color)
      - text-transform: capitalize
      - position: absolute
    label:
      - position: absolute
      - right: 12px
      - bottom: 10px
      - height: auto
      - text-align: right
      - color: var(--primary-text-color)
      - opacity: 0.5
      - padding: 0
      - justify-self: end
      - align-self: end


# Live Tile Mini

live_tile_mini:
  template:
    - live_tile
  show_name: false
  show_label: false
  styles:
    grid:
      - grid-template-rows: auto 0 0
    icon:
      - width: 20px
      - height: 20px
    img_cell:
      - height: 24px
      - padding: 0 0 8px 0
    state:
      - font-size: var(--h4-font-size)
      - font-weight: var(--h2-font-weight)
      - padding: 0 0 4px 4px


# Live Tile with Unit

live_tile_with_unit:
  template:
    - live_tile
  custom_fields:
    unit: '[[[ return entity.attributes.unit_of_measurement ]]]'
  styles:
    grid:
      - grid-template-areas: '". i s ." ". i unit ." "n n l l"'
      - grid-template-rows: auto auto 16px 0
    state:
      - align-self: end
      - padding: 4px 0 0 8px
    custom_fields:
      unit:
        - font-size: var(--h6-font-size)
        - font-weight: var(--h6-font-weight)
        - text-transform: uppercase
        - place-self: start start
        - padding: 0 0 0 8px
        - margin-top: -4px
        - color: var(--primary-text-color)
        - opacity: .6


# Live Tile (with Camera)
# Uses the entire tile background for image.

live_tile_with_camera:
  variables:
    camera: '[[[ return entity.attributes.entity_picture ]]]'
  template:
    - live_tile_card
    - live_tile_with_long_state
  styles:
    name:
      - color: var(--text-accent-color)
    state:
      - color: var(--text-accent-color)
    card:
      - background: '[[[ return "url(" + variables.camera + ")" ]]]'
      - background-size: cover
      - background-position: center center
      - color: var(--text-accent-color)


# Live Tile (with Round Picture)
# Places the image inside a circle. Good for things like displaying a person.

live_tile_with_picture:
  variables:
    picture: '[[[ return entity.attributes.entity_picture ]]]'
  template: live_tile_card
  show_icon: false
  custom_fields:
    picture: ''
  state:
    - value: 'idle'
      color: 'off'
  styles:
    grid:
      - grid-template-areas: '"picture picture" "n s"'
      - grid-template-columns: auto min-content
      - grid-template-rows: auto 16px 0
    name:
      - z-index: 1
    state:
      - place-self: end end
      - z-index: 1
      - padding: 4px 12px 10px 4px
      - font-size: var(--body-font-size)
      - font-weight: var(--body-font-weight)
      - opacity: .667
    custom_fields:
      picture:
        - position: absolute
        - top: 16px
        - left: 16px
        - width: calc( 100% - 32px )
        - height: calc( 100% - 32px )
        - padding: 0
        - aspect-ratio: 1/1
        - border-radius: 50%
        # - border: '4px solid rgba(0,0,0,.25)'
        - background: '[[[ return "url(" + variables.picture + ")" ]]]'
        - background-size: cover
        - background-position: center center
        - background-repeat: no-repeat
        - box-shadow: 0 0 0 2px rgba(var(--rgb-primary-text-color), .1)


# Live Tile (with Small Round Picture)

live_tile_with_small_picture:
  variables:
    picture: '[[[ return entity.attributes.entity_picture ]]]'
  template:
    - live_tile_card
    - live_tile_with_long_state
  custom_fields:
    picture: ''
  state:
    - value: 'idle'
      color: 'off'
  styles:
    grid:
      - grid-template-areas: '"s s" "l l" "picture picture" "n i"'
      - grid-template-columns: 1fr min-content
      - grid-template-rows: min-content min-content auto min-content
    custom_fields:
      picture:
        - width: 40%
        - height: 40%
        - top: 30%
        - left: 30%
        - position: absolute
        - padding: 0
        - aspect-ratio: 1/1
        - border-radius: 50%
        # - border: '4px solid rgba(0,0,0,.25)'
        - background: '[[[ return "url(" + variables.picture + ")" ]]]'
        - background-size: cover
        - background-position: center center
        - background-repeat: no-repeat
        - box-shadow: 0 0 0 2px rgba(var(--rgb-primary-text-color), .1)


# Live Tile (with Last Changed Label)

live_tile_with_last_changed_label:
  show_label: true
  triggers_update: all
  label: |
    [[[
      var diff = (new Date() - new Date(entity.last_changed)) / 1000 / 60
      if (isNaN(diff)) { return 'Unknown' }
      if (diff <= 0.05) { return 'Just now' }
      else if (diff <= 1) { return Math.round(diff * 60) + ' seconds ago' }
      else { return moment(entity.last_changed).fromNow() }
    ]]]


# Live Tile (with State Countdown)

live_tile_with_state_countdown:
  variables:
    duration: 60
  template: live_tile_with_last_changed_label
  state:
    - value: 'off'
      styles:
        card: null
  styles:
    grid:
      - background: |
          [[[
            var diff = (new Date() - new Date(entity.last_changed)) / 1000
            var opacity = 1 - (diff / variables.duration)
            if (diff > variables.duration) { return '' }
            return 'rgba(var(--rgb-primary-color),' + opacity + ')'
          ]]]
      - color: |
          [[[
            var diff = (new Date() - new Date(entity.last_changed)) / 1000
            if (diff > variables.duration / 2) { return 'var(--primary-text-color)' } else { return 'var(--accent-text-color)'}
          ]]]


# Live Tile (with Long State)

live_tile_with_long_state:
  styles:
    state:
      - font-size: var(--h4-font-size)
      - font-weight: 100
      - padding: 8px 12px 2px 12px
      - white-space: normal
      - text-align: left
      - line-height: 24px


# Live Tile (with Longer State)

live_tile_with_longer_state:
  styles:
    state:
      - font-size: var(--h5-font-size)
      - font-weight: 400
      - padding: 10px 12px 2px 12px
      - white-space: normal
      - text-align: left
      - line-height: 20px


# Live Tile (with State Unit)

live_tile_with_state_unit:
  variables:
    unit: '[[[ return entity.attributes.unit_of_measurement ]]]'
    state_display: '[[[ return Math.round(entity.state) ]]]'
  state_display: |
    [[[
      return variables.state_display + "<span style='font-size: var(--h6-font-size); font-weight: var(--h6-font-weight); text-transform: uppercase; opacity: .6;'> " + variables.unit + "</span>"
    ]]]
  styles:
    state:
      - text-overflow: inherit


# Live Tile (with Detailed Label)

live_tile_with_detailed_label:
  card_mod:
    style: |
      #label h6 { text-transform: uppercase; margin: 0; opacity: .67; }
      #label p { margin: 0 0 8px; }


# Live Tile (with Reversed State Colors)

live_tile_with_reversed_state_colors:
  state:
    - value: 'on'
      styles:
        card:
          - background-color: var(--ha-card-background)
        state:
          - color: var(--primary-text-color)
        name:
          - color: var(--primary-text-color)
        label:
          - color: var(--primary-text-color)
          - opacity: 0.67
    - value: 'off'
      styles:
        card:
          - background-color: var(--primary-color)
        state:
          - color: var(--primary-text-color)
        name:
          - color: var(--primary-text-color)
        label:
          - color: var(--primary-text-color)
          - opacity: 0.67


# Live Tile (with Graph)

live_tile_with_graph:
  variables:
    picture: '[[[ return entity.attributes.entity_picture ]]]'
    hours_to_show: 12
    group_by: interval
    points_per_hour: 4
    graph_height: 144
    line_width: 4
    line_color: var(--rgb-accent-color)
    graph: line
    lower_bound: ~10000
    upper_bound: ~0
    bar_spacing: 50
    aggregate_func: avg
  template: live_tile_card
  custom_fields:
    graph:
      card:
        type: custom:mini-graph-card
        entities:
          - entity: '[[[ return entity.entity_id ]]]'
            aggregate_func: '[[[ return variables.aggregate_func ]]]'
        show:
          graph: '[[[ return variables.graph ]]]'
          name: false
          icon: false
          state: false
          labels: false
          points: false
        line_width: '[[[ return variables.line_width ]]]'
        line_color: '[[[ return `rgb(${variables.line_color}` ]]]'
        hours_to_show: '[[[ return variables.hours_to_show ]]]'
        group_by: '[[[ return variables.group_by ]]]'
        points_per_hour: '[[[ return variables.points_per_hour ]]]'
        animate: true
        upper_bound: '[[[ return variables.upper_bound ]]]'
        lower_bound: '[[[ return variables.lower_bound ]]]'
        height: '[[[ return variables.graph_height ]]]'
        bar_spacing: '[[[ return variables.bar_spacing ]]]'
        card_mod:
          style: |
            ha-card { background: none; border-radius: 0; }
  styles:
    grid:
      - grid-template-areas: '"s s" "l l" "graph graph" "n i"'
      - grid-template-columns: 1fr min-content
      - grid-template-rows: min-content auto 0 min-content
    card:
      - color: var(--primary-text-color)
      - background: var(--ha-card-background)
    custom_fields:
      graph:
        - position: absolute
        - bottom: 0
        - width: 100%
        - border-bottom: |
            [[[
              if (variables.graph == "line") { return `3.25rem solid rgba(${variables.line_color}, .15)` } else { return "3.25rem solid transparent" }
            ]]]
        - border-radius: 0
        #   # rgba(var(--rgb-accent-color),.15)
    name:
      - z-index: 2
    icon:
      - z-index: 2


# Live Tile (with Graph Threshold)
# Card becomes increasingly highlighted as entity state reaches the upper or lower bound.

live_tile_with_graph_threshold:
  variables:
    line_color_upper_bound: 75
    line_color_upper_bound_max: 100
    line_color_lower_bound: 25
    line_color_lower_bound_min: 0
  custom_fields:
    graph:
      card:
        line_color: |
          [[[
            if (parseFloat(entity.state) >= variables.line_color_upper_bound_max) { return "var(--primary-text-color)" }
            if (parseFloat(entity.state) <= variables.line_color_lower_bound_min) { return "var(--primary-text-color)" }
            return `rgb(${variables.line_color}`
          ]]]
        # color_thresholds_transition: hard
        color_thresholds: |
          [[[
            var stateValue = parseFloat(entity.state)
            if ((stateValue >= variables.line_color_upper_bound_max) || (stateValue <= variables.line_color_lower_bound_min)) {
              return []
            } else {
              var primaryTextColor = '#' + getComputedStyle(document.body).getPropertyValue('--rgb-primary-text-color').split(',').map(x => parseInt(x).toString(16).padStart(2, '0')).join('')
              var accentColor = getComputedStyle(document.body).getPropertyValue('--accent-color')
            
              return [
                {
                  value: variables.line_color_lower_bound,
                  color: accentColor
                },
                {
                  value: variables.line_color_lower_bound,
                  color: primaryTextColor
                },
                {
                  value: variables.line_color_upper_bound,
                  color: primaryTextColor
                },
                {
                  value: variables.line_color_upper_bound,
                  color: accentColor
                }            
              ]
            }
          ]]]
  styles:
    grid:
      - background: |
          [[[
            var stateValue = parseFloat(entity.state)
            if (stateValue >= variables.line_color_upper_bound_max) { return "var(--accent-color)"}
            if (stateValue <= variables.line_color_lower_bound_min) { return "var(--accent-color)"}
            if (stateValue >= variables.line_color_upper_bound) {
              var percent = (Math.min((stateValue - variables.line_color_upper_bound) / (variables.line_color_upper_bound_max - variables.line_color_upper_bound), 1) * .5)
              return `rgba(var(--rgb-primary-color), ${percent})`
            }
            if (stateValue <= variables.line_color_lower_bound) {
              var percent = (Math.min((variables.line_color_lower_bound - stateValue) / (variables.line_color_lower_bound - variables.line_color_lower_bound_min), 1) * .5)
              return `rgba(var(--rgb-primary-color), ${percent})`
            }
            return "var(--ha-card-background)"
          ]]]
    custom_fields:
      graph:
        - border-bottom: |
            [[[
              var lineColor = "var(--rgb-accent-color)"
              if (parseFloat(entity.state) >= variables.line_color_upper_bound_max) { lineColor = "var(--rgb-primary-text-color)" }
              if (parseFloat(entity.state) <= variables.line_color_lower_bound_min) { lineColor = "var(--rgb-primary-text-color)" }
              if (variables.graph == "line") { return `3.25rem solid rgba(${lineColor}, .15)` } else { return "3.25rem solid transparent" }
            ]]]


# Live Tile (with Percent Bar)

live_tile_with_percent_bar:
  variables:
    percent: '[[[ return entity.state ]]]'
  color: var(--primary-background-color)
  styles:
    card:
      - background: |
          [[[
            return `linear-gradient(to bottom, var(--accent-color), var(--accent-color)) bottom left / ${variables.percent}% 4px no-repeat,
              linear-gradient(to bottom, var(--ha-card-background), var(--ha-card-background)) top left / ${variables.percent}% 100% no-repeat, 
              linear-gradient(to bottom, var(--ha-card-background), var(--ha-card-background))`
          ]]]
        color: var(--primary-text-color)

live_tile_with_accent_percent_bar:
  variables:
    percent: '[[[ return entity.state ]]]'
  color: var(--primary-background-color)
  styles:
    card:
      - background: |
          [[[
            return `linear-gradient(to bottom, var(--accent-color), var(--accent-color)) bottom left / ${variables.percent}% 4px no-repeat,
              linear-gradient(to bottom, rgba(var(--rgb-primary-color), .5), rgba(var(--rgb-primary-color), .5)) top left / ${variables.percent}% 100% no-repeat, 
              linear-gradient(to bottom, rgba(var(--rgb-primary-color), .5), rgba(var(--rgb-primary-color), .5))`
          ]]]
        color: var(--accent-text-color)


# Media Player Live Tile

live_tile_media_player:
  template:
    - live_tile_card
    - live_tile_with_long_state
  variables:
    aspect_ratio: 2/1
  icon: >-
    [[[ if (entity.state == "playing") { return "mdi:play" } else if
    (entity.state == "paused") { return "mdi:pause" } else { return
    entity.attributes.icon } ]]]
  state_display: '[[[ return entity.attributes.media_title ]]]'
  label: |-
    [[[
      if (entity.attributes.media_content_type != undefined) {
        if (entity.attributes.media_content_type == "music") {
          var label
          if (entity.attributes.media_artist) {
            label = entity.attributes.media_artist + "<br>"
          } else if (entity.attributes.media_album_artist) {
            label = entity.attributes.media_album_artist + "<br>"
          }
          if (entity.attributes.media_album_name) {
            label += entity.attributes.media_album_name
          }
          return label
        } else if (entity.attributes.media_content_type == "tvshow") {
          if (entity.attributes.media_series_title) { return entity.attributes.media_series_title }
        }
      }
    ]]]
  custom_fields:
    picture: ''
  color: var(--primary-color)
  state:
    - value: paused
      styles:
        card:
          - background: var(--ha-card-background)
        state:
          - color: var(--disabled-text-color)
        name:
          - color: var(--primary-text-color)
        label:
          - color: var(--primary-text-color)
          - opacity: 0.67
  styles:
    grid:
      - grid-template-areas: '"s picture" "l picture" "n i"'
      - grid-template-columns: auto min-content
    state:
      - padding-right: |-
            [[[ 
              if ((entity.attributes.entity_picture != undefined) || (entity.attributes.entity_picture_local != undefined)) {
                return "50%"
              } else { return 0 }
            ]]]
    label:
      - padding-right: |-
            [[[ 
              if ((entity.attributes.entity_picture != undefined) || (entity.attributes.entity_picture_local != undefined)) {
                return "50%"
              } else { return 0 }
            ]]]
    img_cell:
      - place-self: end end
      - width: 24px
      - position: absolute
    name:
      - padding-right: 24px
    custom_fields:
      picture:
        - background: |-
            [[[ 
              if (entity.attributes.entity_picture != undefined) {
                return "url(" + entity.attributes.entity_picture + ")"
              } else if (entity.attributes.entity_picture_local != undefined) {
                return "url(" + entity.attributes.entity_picture_local + ")"
              }
            ]]]
        - background-size: cover
        - background-position: center center
        - position: absolute
        - right: 16px
        - width: |-
            [[[ 
              if ((entity.attributes.entity_picture != undefined) || (entity.attributes.entity_picture_local != undefined)) {
                return "calc( 50% - 32px )"
              } else { return 0 }
            ]]]
        - border-radius: 50%
        - aspect-ratio: 1/1
        - box-shadow: |-
            [[[ 
              if (entity.attributes.entity_picture != undefined) {
                return "0 0 0 2px rgba(var(--rgb-primary-text-color), .1)"
              }
            ]]]


# Live Tile with Map

live_tile_with_map:
  variables:
    zoom_level: 2
    hours_to_show: 1
  custom_fields:
    map_overlay: ''
    map_overlay1: ''
    map_overlay2: ''
    map_overlay3: ''
    map_overlay4: ''
    map_overlay5: ''
    map:
      card:
        type: map
        entities:
          - entity: '[[[ return entity.entity_id ]]]'
        default_zoom: '[[[ return variables.zoom_level ]]]'
        auto_fit: true
        hours_to_show: '[[[ return variables.hours_to_show ]]]'
        aspect_ratio: .5
        card_mod:
          style:
            .: |
              ha-icon-button {display: none;}
            ha-map$: |
              .leaflet-control-container {display: none;}
              ha-entity-marker {display: none;}
              .leaflet-interactive {stroke-width: 1;}
  styles:
    card:
      - background-size: 120% 120%
      - background-position: center center
      - z-index: 3
    custom_fields:
      map:
        - position: absolute
        - z-index: 1
        - top: 0
        - left: 0
        - width: 100%
        - height: 100%
        - filter: |
            [[[
              if (variables.zoom_level > 5) {
                return 'sepia(1) saturate(1.2) hue-rotate(calc(var(--hue-primary-color) - 39deg)) brightness(1.6) contrast(1.8)'
              } else {
                return 'brightness(1.2) contrast(1.5)'
              }
            ]]]
      map_overlay:
        - position: absolute
        - z-index: 2
        - top: 0
        - left: 0
        - width: 100%
        - height: 100%
        - background-color: var(--ha-card-background)
        - mix-blend-mode: color
      map_overlay1:
        - position: absolute
        - z-index: 2
        - top: 0
        - left: 0
        - width: 100%
        - height: 100%
      map_overlay2:
        - position: absolute
        - z-index: 2
        - top: 16px
        - left: 16px
        - width: calc(100% - 32px)
        - height: calc(100% - 32px)
        - border-radius: 50%
        - background-color: rgba(var(--rgb-primary-color),.5)
        - mix-blend-mode: color
      map_overlay3:
        - position: absolute
        - z-index: 2
        - top: 16px
        - left: 16px
        - width: calc(100% - 32px)
        - height: calc(100% - 32px)
        - border-radius: 50%
        - border: 1px solid rgba(var(--rgb-primary-color),.6)
      map_overlay4:
        - position: absolute
        - z-index: 2
        - top: calc(16.66% + 16px)
        - left: calc(16.66% + 16px)
        - width: calc(66.66% - 32px)
        - height: calc(66.66% - 32px)
        - border-radius: 50%
        - background-color: rgba(var(--rgb-primary-color),1)
        - mix-blend-mode: color
      map_overlay5:
        - position: absolute
        - z-index: 2
        - top: calc(16.66% + 16px)
        - left: calc(16.66% + 16px)
        - width: calc(66.66% - 32px)
        - height: calc(66.66% - 32px)
        - border-radius: 50%
        - background-color: rgba(var(--rgb-primary-color),.1)
        - border: 1px solid rgba(var(--rgb-primary-color),.8)
    name:
      - z-index: 4
    img_cell:
      - z-index: 4
    label:
      - z-index: 4
    state:
      - z-index: 4
  tap_action:
    action: more-info


# Large Tile Card

large_tile_card:
  template: live_tile_card
  styles:
    grid:
      - grid-template-areas: '"n i" "s i" "l l"'
      - grid-template-rows: min-content min-content min-content
    card:
      - padding: 16px
      - background-size: cover
      - background-position: center center
    name:
      - padding: 0
    img_cell:
      - padding: 0
      - align-self: start
    state:
      - font-size: var(--h1-font-size)
      - font-weight: var(--h1-font-weight)
      - padding: 0
    label:
      - padding: 0


# Light Button Card

light_button_card:
  template: live_tile_card
  state:
    - value: 'on'
      styles:
        card:
          - background: var(--ha-card-background)


# Light Group Button Card

light_button_card_group:
  template: live_tile_card
  group_expand: true
  state:
    - value: 'on'
      label: |
        [[[
          var lightsOn = entity.attributes.entity_id.filter(e => states[e].state == "on").length
          if (lightsOn > 1) { return lightsOn + " lights are on" } else { return "1 light is on" }
        ]]]
  styles:
    card:
      - background: |
          [[[
            if (entity.state == "on") {
              var lights = entity.attributes.entity_id.filter(e => states[e].state != "off")
              if (lights.length > 0) {
                var totalColor = [0,0,0]
                var totalLights = 0
                lights.forEach(light => {
                  var colors = states[light].attributes.rgb_color
                  if (Array.isArray(colors)) {
                    colors.forEach((col, index) => totalColor[index] += col)
                    totalLights += 1
                  }
                })
                totalColor.forEach((col, index) => totalColor[index] = Math.round( totalColor[index] / totalLights ))
                if (isNaN(totalColor[0])) { var finalColor = 'var(--rgb-primary-color)' } else { var finalColor = totalColor.toString() }
                return 'linear-gradient( 0deg, rgb(' + finalColor + ') 4px, rgba(' + finalColor + ', .1) 4px )'
              }
            } else {
              return 'var(--slider-thumb-color)'
            }
          ]]]
      - color: var(--primary-text-color)


# Hue Scene Tile

hue_scene_card:
  variables:
    name: ''
    color: ''
  type: 'custom:button-card'
  name: '[[[ return variables.name ]]]'
  aspect_ratio: 1/1
  styles:
    card:
      - background: |
          [[[
            if (variables.color == '') {
              var colorDict = {
                'bright ambient': 'rgb(207, 172, 104)',
                'bright': 'rgb(250, 207, 125)',
                'relax': 'rgb(195, 150, 71)',
                'nightlight': 'rgb(136, 89, 30)',
                'lights camera action!': 'rgb(141, 97, 59)',
                'pink thoughts': 'rgb(207, 50, 188)',
                'soho': 'rgb(107, 28, 203)',
                'nebula': 'rgb(95, 101, 156)',
                'arctic aurora': 'rgb(89, 196, 190)',
                'energize': 'rgb(64, 64, 64)',
                'concentrate': 'rgb(251, 212, 180)',
                'read': 'rgb(248, 173, 107)',
                'dimmed': 'rgb(64, 47, 33)'
              }
              if (colorDict[variables.name.toLowerCase()] != undefined) { return colorDict[variables.name.toLowerCase()] }
            } else {
              return variables.color
            }
          ]]]
    name:
      - text-align: left
      - place-self: flex-start
      - font-size: var(--body-font-size)
      - padding: 8px 12px
      - white-space: normal
      - overflow: visible
  tap_action:
    action: call-service
    service: hue.activate_scene
    service_data:
      entity_id: '[[[ return entity.entity_id ]]]'


# Hue Scene Tile (Mini)

hue_scene_card_mini:
  template: hue_scene_card
  styles:
    name:
      - font-size: var(--h6-font-size)
      - font-weight: 600
      - text-transform: uppercase

