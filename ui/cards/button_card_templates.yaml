# METROLOGY FOR HOME ASSISTANT
# Button Card Templates
# Made by Madelena Mak 2022


## BASES AND COMPONENTS

# VanillaTilt
# Add tilting effects on the live tiles
# Code from https://github.com/matt8707/hass-config/blob/master/button_card_templates.yaml

tilt:
  custom_fields:
    tilt: >
      [[[
        try {
          setTimeout(() => {
            let elt = this.shadowRoot,
              card = elt.getElementById('card'),
              ignore = window.navigator.userAgent;
            if (elt && card && !ignore.match(/iPhone/i) && !ignore.match(/Android/i)) {
              VanillaTilt.init(card, variables.tilt_options);
            }
          }, 0);
        }
        catch (e) {
        }
      ]]]

# Require Confirmation Dialog

require_confirmation:
  confirmation:
    text: >-
      [[[ return `Are you sure you want to toggle
      ${entity.attributes.friendly_name}?` ]]]


## HEADERS AND TITLE CARDS

# Title Card (with icon)

title_card_with_icon:
  layout: icon_name_state2nd
  tap_action:
    action: none
  styles:
    grid:
      - grid-template-rows: auto
      - grid-template-columns: max-content auto
    name:
      - font-size: 32pt
      - font-weight: 500
      - place-self: center start
    card:
      - background: none
      - padding: 8px 0 0
    img_cell:
      - width: 48px
      - padding: 4px 24px 4px 16px
      - place-self: center
    icon:
      - opacity: 0.8
      - color: white
      - width: 100%
    state:
      - font-size: 10pt
      - place-self: start
      - padding-bottom: 8px


# Header Card

header_card:
  variables:
    name: ''
    label: ''
    arrow: 'mdi:arrow-right'
    action: navigate
    link: ''

  show_name: false
  show_state: false
  show_label: false

  styles:
    grid:
      - grid-template-columns: auto min-content 16px
      - grid-template-rows: 26px auto 8px
      - grid-template-areas: "'header .' 'header link' 'header .'"
    card:
      - background: none
      - padding: 0

  custom_fields:
    header:
      card:
        type: 'custom:button-card'
        template:
          - header_card_no_link
        name: '[[[ return variables.name ]]]'

    link:
      card:
        type: 'custom:button-card'
        name: '[[[ return variables.label ]]]'
        icon: '[[[ return variables.arrow ]]]'
        show_state: false

        tap_action:
          action: '[[[ return variables.action ]]]'
          navigation_path: '[[[ return variables.link ]]]'
          url_path: '[[[ return variables.link ]]]'
          entity: '[[[ return variables.link ]]]'

        styles:
          grid:
            - grid-template-columns: min-content min-content
            - grid-template-areas: '"n i"'
          card:
            - background: none
            - padding: 0
          img_cell:
            - width: 16px
            - background: var(--ha-card-background)
            - border-radius: 0 4px 4px 0
            - padding-right: 8px
          icon:
            - width: 100%
            - padding-bottom: 2px
          name:
            - background: var(--ha-card-background)
            - border-radius: 4px 0 0 4px
            - padding: 4px 8px 6px
            - font-size: var(--subtitle-font-size)


# Header Card (with no links)
# Header text is 'name'.

header_card_no_link:
  variables:
    name: ''

  name: '[[[ return variables.name ]]]'
  show_state: false
  show_label: false

  tap_action:
    action: none

  styles:
    grid:
      - grid-template-columns: auto
      - grid-template-areas: '"n"'
    card:
      - padding: 32px 16px 16px 16px
      - background: none
      - cursor: default
    name:
      - text-align: left
      - align-self: center
      - justify-self: start
      - font-size: var(--body-font-size)
      - font-weight: 500
      - color: var(--secondary-text-color)


# LIVE TILES

# Live Tile Card
# This is the base of various tiles.

live_tile_card:
  variables:
    aspect_ratio: 1/1
  xcolor: auto
  color_type: card
  size: 20px
  show_state: true
  show_label: true
  state:
    - value: 'off'
      styles:
        card:
          - background-color: var(--ha-card-background)
        state:
          - color: var(--primary-text-color)
        name:
          - color: var(--primary-text-color)
        label:
          - color: var(--primary-text-color)
          - opacity: 0.67
    - value: unavailable
      styles:
        card:
          - background-color: var(--ha-card-background)
        state:
          - color: var(--disabled-text-color)
        name:
          - color: var(--disabled-text-color)
        label:
          - color: var(--disabled-text-color)
          - opacity: 0.67
  hold_action:
    action: more-info
  styles:
    grid:
      - grid-template-areas: |
          "s s"
          "l l"
          "n i"
      - grid-template-columns: 1fr min-content
      - grid-template-rows: min-content auto min-content
    card:
      - aspect-ratio: '[[[ return variables.aspect_ratio ]]]'
      - padding: 0
    name:
      - font-size: var(--body-font-size)
      - padding: 4px 4px 12px 12px
      - white-space: normal
      - text-align: left
      - justify-self: start
      - align-self: end
    state:
      - font-size: var(--h3-font-size)
      - justify-self: start
      - padding: 2px 0 2px 12px
      - font-weight: var(--h3-font-weight)
      - align-self: start
      - text-overflow: clip
    img_cell:
      - align-self: end
      - text-align: right
      - padding: 4px 8px 8px 8px
      - height: 28px
    label:
      - font-size: var(--body-font-size)
      - justify-self: start
      - padding: 0px 12px
      - align-self: start
      - opacity: 0.67
      - white-space: normal
      - text-align: left
      - height: 100%


# Live Tile

live_tile:
  template: live_tile_card
  styles:
    grid:
      - grid-template-areas: '". i s ." "n n l l"'
      - grid-template-columns: auto min-content min-content auto
      - grid-template-rows: auto 16px 0
    card:
      - background: var(--ha-card-background)
    icon:
      - color: var(--primary-text-color)
      - width: 40px
      - height: 40px
      - margin: 0
    img_cell:
      - height: 40px
      - align-self: center
      - justify-self: end
      - padding: 8px 0 0 0
    state:
      - color: var(--primary-text-color)
      - font-size: var(--h2-font-size)
      - font-weight: var(--h2-font-weight)
      - align-self: center
      - justify-self: start
      - padding: 4px 0px 2px 8px
    name:
      - color: var(--primary-text-color)
      - text-transform: capitalize
      - position: absolute
    label:
      - line-height: 16px
      - position: absolute
      - right: 8px
      - top: calc( 100% - 28px )
      - text-align: right
      - color: var(--primary-text-color)
      - opacity: 0.5
      - padding: 0 0 12px 0
      - justify-self: end
      - align-self: end


# Live Tile (with Camera)
# Uses the entire tile background for image.

live_tile_with_camera:
  variables:
    camera: '[[[ return entity.attributes.entity_picture ]]]'
  template:
    - live_tile_card
    - live_tile_with_long_state
  styles:
    name:
      - color: var(--text-accent-color)
    state:
      - color: var(--text-accent-color)
    card:
      - background: '[[[ return "url(" + variables.camera + ")" ]]]'
      - background-size: cover
      - background-position: center center
      - color: var(--text-accent-color)


# Live Tile (with Round Picture)
# Places the image inside a circle.

live_tile_with_picture:
  variables:
    picture: '[[[ return entity.attributes.entity_picture ]]]'
  template: live_tile_card
  show_icon: false
  custom_fields:
    picture: ''
  state:
    - value: 'idle'
      color: 'off'
  styles:
    grid:
      - grid-template-areas: '"picture picture" "n s"'
      - grid-template-columns: auto min-content
      - grid-template-rows: auto 16px 0
    name:
      - z-index: 1
    state:
      - place-self: end end
      - z-index: 1
      - padding: 4px 12px 12px 4px
      - font-size: var(--body-font-size)
      - font-weight: var(--body-font-weight)
      - opacity: .667
    custom_fields:
      picture:
        - position: absolute
        - top: 12px
        - left: 12px
        - width: calc( 100% - 32px )
        - height: calc( 100% - 32px )
        - padding: 0
        - aspect-ratio: 1/1
        - border-radius: 50%
        - border: '4px solid rgba(0,0,0,.25)'
        - background: '[[[ return "url(" + variables.picture + ")" ]]]'
        - background-size: cover
        - background-position: center center


# Live Tile (with Last Changed Label)

live_tile_with_last_changed_label:
  show_label: true
  triggers_update: all
  label: |
    [[[
      var diff = (new Date() - new Date(entity.last_changed)) / 1000 / 60
      if (isNaN(diff)) { return 'Unknown' }
      var display = Math.round(diff / 60 / 24) + ' days ago'
      if (diff <= 0.05) { display = 'Just now' }
      else if (diff <= 1 ) { display = Math.round(diff * 60) + ' seconds ago' }
      else if (diff < 90) { display = Math.round(diff) + ' min ago' }
      else if (diff < 2160) { display = Math.round(diff / 60) + ' hours ago' }
      return display
    ]]]


# Live Tile (with State Countdown)

live_tile_with_state_countdown:
  variables:
    duration: 60
  template: live_tile_with_last_changed_label
  state:
    - value: 'off'
      styles:
        card: null
  styles:
    card:
      - background-image: |
          [[[
            var diff = (new Date() - new Date(entity.last_changed)) / 1000
            var opacity = 1 - (diff / variables.duration)
            if (diff > variables.duration) { return '' }
            return 'linear-gradient( to top, rgba(var(--rgb-primary-color),' + opacity + ') 0%, rgba(var(--rgb-primary-color),' + opacity + ') 100%)'
          ]]]


# Live Tile (with Long State)

live_tile_with_long_state:
  styles:
    state:
      - font-size: var(--h4-font-size)
      - font-weight: 100
      - padding: 6px 12px 2px 12px
      - white-space: normal
      - text-align: left
      - line-height: 24px


# Live Tile (with Longer State)

live_tile_with_longer_state:
  styles:
    state:
      - font-size: var(--h5-font-size)
      - font-weight: 400
      - padding: 8px 12px 2px 12px
      - white-space: normal
      - text-align: left
      - line-height: 20px


# Live Tile (with Percent Bar)

live_tile_with_percent_bar:
  color: var(--primary-background-color)
  styles:
    card:
      - background-color: var(--ha-card-background)
      - background-repeat: no-repeat
      - background-size: '[[[ return entity.state + "% 4px" ]]]'
      - background-position: left bottom
      - background-image: 'linear-gradient( var(--primary-color), var(--accent-color) )'


# Media Player Live Tile

live_tile_media_player:
  template:
    - live_tile_card
    - live_tile_with_long_state
  variables:
    aspect_ratio: 2/1
  icon: >-
    [[[ if (entity.state == "playing") { return "mdi:play" } else if
    (entity.state == "paused") { return "mdi:pause" } else { return
    entity.attributes.icon } ]]]
  state_display: '[[[ return entity.attributes.media_title ]]]'
  label: |-
    [[[
      if (entity.attributes.media_content_type != undefined) {
        if (entity.attributes.media_content_type == "music") {
          if (entity.attributes.media_artist && entity.attributes.media_album_name) {
            return entity.attributes.media_artist + "<br>" + entity.attributes.media_album_name
            }
        } else if (entity.attributes.media_content_type == "tvshow") {
          if (entity.attributes.media_series_title) { return entity.attributes.media_series_title }
        }
      }
    ]]]
  custom_fields:
    picture: ''
  color: var(--primary-color)
  state:
    - value: paused
      styles:
        card:
          - background: var(--ha-card-background)
        state:
          - color: var(--disabled-text-color)
        name:
          - color: var(--primary-text-color)
        label:
          - color: var(--primary-text-color)
          - opacity: 0.67
  styles:
    grid:
      - grid-template-areas: '"s picture" "l picture" "n i"'
      - grid-template-columns: auto 50%
    state:
      - padding-right: 0
    label:
      - padding-right: 0
    img_cell:
      - place-self: end end
      - width: 24px
    custom_fields:
      picture:
        - background: |-
            [[[ 
              if (entity.attributes.entity_picture != '') {
                return "url(" + entity.attributes.entity_picture + ")"
              } else if (entity.attributes.entity_picture_local != '') {
                return "url(" + entity.attributes.entity_picture_local + ")"
              }
            ]]]
        - background-size: cover
        - background-position: center center
        - position: absolute
        - right: 16px
        - width: calc( 50% - 32px )
        - border-radius: 50%
        - aspect-ratio: 1/1


# Large Tile Card

large_tile_card:
  template: live_tile_card
  styles:
    grid:
      - grid-template-areas: '"n i" "s i" "l l"'
      - grid-template-rows: min-content min-content min-content
    card:
      - padding: 16px
      - background-size: cover
    name:
      - padding: 0
    img_cell:
      - padding: 0
      - align-self: start
    state:
      - font-size: var(--h1-font-size)
      - font-weight: var(--h1-font-weight)
      - padding: 0
    label:
      - padding: 0


# Light Button Card

light_button_card:
  template: live_tile_card
  state:
    - value: 'on'
      styles:
        card:
          - background: var(--ha-card-background)


# Light Group Button Card

light_button_card_group:
  template: live_tile_card
  group_expand: true
  state:
    - value: 'on'
      label: |
        [[[
          var lightsOn = entity.attributes.entity_id.filter(e => states[e].state == "on").length
          if (lightsOn > 1) { return lightsOn + " lights are on" } else { return "1 light is on" }
        ]]]
  styles:
    card:
      - background: |
          [[[
            if (entity.state == "on") {
              var lights = entity.attributes.entity_id.filter(e => states[e].state != "off")
              if (lights.length > 0) {
                var totalColor = [0,0,0]
                var totalLights = 0
                lights.forEach(light => {
                  var colors = states[light].attributes.rgb_color
                  if (Array.isArray(colors)) {
                    colors.forEach((col, index) => totalColor[index] += col)
                    totalLights += 1
                  }
                })
                totalColor.forEach((col, index) => totalColor[index] = Math.round( totalColor[index] / totalLights ))
                if (isNaN(totalColor[0])) { var finalColor = 'var(--rgb-primary-color)' } else { var finalColor = totalColor.toString() }
                return 'linear-gradient(0deg, var(--ha-card-background), var(--ha-card-background)), linear-gradient( 0deg, rgb(' + finalColor + ') 4px, rgba(' + finalColor + ', .1) 4px )'
              }
            } else {
              return 'var(--slider-thumb-color)'
            }
          ]]]
      - color: var(--primary-text-color)


# Hue Scene Tile

hue_scene_card:
  variables:
    name: ''
    color: ''
  type: 'custom:button-card'
  name: '[[[ return variables.name ]]]'
  aspect_ratio: 1/1
  styles:
    card:
      - background: |
          [[[
            if (variables.color == '') {
              var colorDict = {
                'bright ambient': 'rgb(207, 172, 104)',
                'bright': 'rgb(250, 207, 125)',
                'relax': 'rgb(195, 150, 71)',
                'nightlight': 'rgb(136, 89, 30)',
                'lights camera action!': 'rgb(141, 97, 59)',
                'pink thoughts': 'rgb(207, 50, 188)',
                'soho': 'rgb(107, 28, 203)',
                'nebula': 'rgb(95, 101, 156)',
                'arctic aurora': 'rgb(89, 196, 190)',
                'energize': 'rgb(64, 64, 64)',
                'concentrate': 'rgb(251, 212, 180)',
                'read': 'rgb(248, 173, 107)',
                'dimmed': 'rgb(64, 47, 33)'
              }
              if (colorDict[variables.name.toLowerCase()] != undefined) { return colorDict[variables.name.toLowerCase()] }
            } else {
              return variables.color
            }
          ]]]
    name:
      - text-align: left
      - place-self: flex-start
      - font-size: var(--body-font-size)
      - padding: 8px 12px
      - white-space: normal
      - overflow: visible
  tap_action:
    action: call-service
    service: hue.activate_scene
    service_data:
      entity_id: '[[[ return entity.entity_id ]]]'


# Hue Scene Tile (Mini)

hue_scene_card_mini:
  template: hue_scene_card
  styles:
    name:
      - font-size: var(--h6-font-size)
      - font-weight: 500
      - text-transform: uppercase


# ROWS
# For use in Entities Card usually

# Chore Row

chore_card:
  variables:
    now: '[[[ return new Date() ]]]'
    last_done: '[[[ return new Date(entity.state) ]]]'
    diff: >-
      [[[ return Math.round((new Date() - new Date(entity.state)) / 1000 /
      60 / 60 / 24 ) ]]]
    due: >-
      [[[ return states[entity.entity_id.replace("input_button",
      "input_text")].state ]]]
  triggers_update: all
  show_label: true
  layout: icon_name_state2nd
  size: 24px
  label: |
    [[[
      var doneStr
      if (variables.diff < 2) {
        if (variables.last_done.getDay() == variables.now.getDay()) { doneStr = 'today' } else { doneStr = 'yesterday' }
      } else if (isNaN(variables.diff)) {
        doneStr = 'unknown'
      } else {
        doneStr = variables.diff + ' days ago'
      }
      if (variables.due > 0) {
        return 'Every ' + variables.due + ' days &bull; Last done ' + doneStr
      } else { return 'As needed &bull; Last done ' + doneStr }
    ]]]
  custom_fields:
    badge: |
      [[[
        if ((variables.diff < 2) && (variables.last_done.getDay() == variables.now.getDay())) { return 'Done' }
        if (variables.due > 0) {
          if (variables.due < variables.diff) { return 'Overdue' }
          if (variables.due < variables.diff + (variables.due / 4)) { return 'To do soon' }
        }
      ]]]
  styles:
    card:
      - margin: 4px 0
      - padding: 4px 12px
      - background-color: |
          [[[
            if ((variables.diff < 2) && (variables.last_done.getDay() == variables.now.getDay())) { return 'rgba(var(--rgb-success-color), .33)' }
            if ((variables.due > 0) && (variables.due < variables.diff)) { return 'rgba(var(--rgb-error-color), .33)' } else {return 'transparent'}
          ]]]
    grid:
      - grid-template-columns: min-content 1fr min-content
      - grid-template-areas: '"i n badge" "i s badge" "i l badge"'
    img_cell:
      - align-self: middle
      - text-align: start
      - padding: 8px 24px 8px 4px
    icon:
      - color: |
          [[[
            if ((variables.diff < 2) && (variables.last_done.getDay() == variables.now.getDay())) { return 'var(--success-color)' }
            if (variables.due > 0) {
              if (variables.due < variables.diff) { return 'var(--error-color)' }
              if (variables.due < variables.diff + (variables.due / 4)) { return 'var(--warning-color)' }
            } else { return 'var(--primary-text-color)' }
          ]]]
    name:
      - align-self: middle
      - justify-self: start
      - font-size: var(--body-font-size)
    label:
      - align-self: middle
      - justify-self: start
      - font-size: var(--body-font-size)
      - opacity: 0.66
    custom_fields:
      badge:
        - background: |
            [[[
              if ((variables.diff < 2) && (variables.last_done.getDay() == variables.now.getDay())) { return 'var(--success-color)' }
              if (variables.due < variables.diff) { return 'var(--error-color)' } else { return 'var(--warning-color)' }
            ]]]
        - padding: 2px
        - line-height: 1
        - font-size: var(--h6-font-size)
        - font-weight: 900
        - text-transform: uppercase
        - border-radius: 2px
        - color: var(--accent-text-color)
  tap_action:
    action: call-service
    service: input_button.press
    service_data:
      entity_id: entity
  hold_action:
    action: more-info
    entity: >-
      [[[ return entity.entity_id.replace("input_button", "input_text")
      ]]]


# Rail Rows
# (I love puns.)

rail_station_row:
  variables:
    rail0_entity: null
    rail1_entity: null
    rail2_entity: null
    rail3_entity: null
    rail4_entity: null
    station_rail: -1
    terminate_at: "none"

    condition_attribute: round_trip_time_avg
    condition_threshold: 60
    on_color: var(--primary-color)
    off_color: rgb(var(--rgb-disabled-color))
    mid_color: var(--warning-color)
  custom_fields:
    rail0: ''
    rail1: ''
    rail2: ''
    rail3: ''
    rail4: ''
    station: ''
  show_icon: false
  show_label: true
  show_state: true
  triggers_update: all
  styles:
    grid:
      - grid-template-columns: min-content min-content min-content min-content min-content min-content min-content auto min-content
      - grid-template-rows: min-content min-content
      - grid-template-areas: '"rail0 rail1 rail2 rail3 rail4 station i n s" "rail0 rail1 rail2 rail3 rail4 station i l s"'
      - xoverflow: visible
    card:
      - margin: 0
      - padding: 0
      - background: none
      - font-size: var(--body-font-size)
      - text-align: left
      - min-height: 56px
      - xoverflow: visible
    name:
      - place-self: center start
      - margin-left: 80px
      - xtransform-origin: center left
      - xtransform: rotate(-45deg)
    label:
      - place-self: center start
      - margin-left: 80px
      - color: var(--secondary-text-color)
      - xtransform-origin: center left
      - xtransform: translateX(12px) translateY(-8px) rotate(-45deg)
    state:
      - place-self: center end
    custom_fields:
      station:
        - position: absolute
        - left: '[[[ if ((variables.terminate_at != "none") && !(variables.terminate_at.includes("terminal"))) {return "58px"} else {return (variables.station_rail * 12) + "px"} ]]]'
        - width: 4px
        - height: 4px
        - margin-top: 1px
        - border-radius: 8px
        - border: 2px solid var(--station-color)
        - background: white
  extra_styles: |
    [[[
      var extra_styles = ''
      for (let rail = 0; rail <= 4; rail++) {
        var style = `
          #rail${ rail } {
            display: ${ (variables['rail' + rail + '_entity'] == null) ? 'none' : 'block' };
            position: absolute;
            left: ${ rail * 12 }px;
            top:
              ${ ((variables.station_rail == rail) && (variables.terminate_at.includes('top')))
                  ? 'calc( 50% - ' + (4 * !(variables.terminate_at.includes('terminal'))) + 'px )' : '0' };
            width: ${ ((variables.station_rail == rail) && !(variables.terminate_at.includes("terminal"))) ? (6 + (4 - rail) * 12) + "px" : "0" };
            height:
              ${ variables.station_rail == rail
                  ? variables.terminate_at.includes("terminal")
                    ? '50%'
                    : variables.terminate_at.includes("top")
                      ? 'calc( 50% + 4px )'
                      : variables.terminate_at.includes("bottom")
                        ? 'calc( 50% - 4px )'
                        : '100%'
                  : '100%'
              };
            box-shadow: 0px 0px 0px 2px rgba(0,0,0,0.5);
            --rail-color:
              ${ variables['rail' + rail + '_entity'] !== null
                  ? states[variables['rail' + rail + '_entity']].attributes[variables.condition_attribute] !== undefined
                    ? states[variables['rail' + rail + '_entity']].attributes[variables.condition_attribute] >= variables.condition_threshold
                      ? variables.mid_color
                      : variables.on_color
                    : variables.off_color
                  : 'transparent'
              };
            border-left: 8px solid var(--rail-color);
            border-top: ${ ((variables.station_rail == rail) && (variables.terminate_at == "top")) ? "8px solid var(--rail-color)" : "none" };
            border-bottom: ${ ((variables.station_rail == rail) && (variables.terminate_at == "bottom")) ? "8px solid var(--rail-color)" : "none" };
            border-radius:
              ${ variables.station_rail == rail
                  ? variables.terminate_at == "top"
                    ? (6 * (5 - rail)) + "px 0 0 0"
                    : variables.terminate_at == "bottom"
                      ? "0 0 0 " + (6 * (5 - rail)) + "px"
                      : "0"
                  : "0"
              };
          }
        `
        extra_styles = extra_styles + style
      }
      var stationStyle = `
        #station {
          --station-color:
            ${ entity != null
                ? entity.attributes[variables.condition_attribute] !== undefined
                  ? entity.attributes[variables.condition_attribute] >= variables.condition_threshold
                    ? variables.mid_color
                    : variables.on_color
                  : variables.off_color
                : 'transparent'
            }
          }
        `
      return extra_styles + stationStyle
    ]]]
  tap_action:
    action: none

rail_interchange_row:
  variables:
    rail0_top_entity: null
    rail0_bottom_entity: null
    rail1_top_entity: null
    rail1_bottom_entity: null
    rail2_top_entity: null
    rail2_bottom_entity: null
    rail3_top_entity: null
    rail3_bottom_entity: null
    rail4_top_entity: null
    rail4_bottom_entity: null
    station_size_from: 0
    station_size_to: 3

    condition_attribute: round_trip_time_avg
    condition_threshold: 60
    on_color: var(--primary-color)
    off_color: rgb(var(--rgb-disabled-color))
    mid_color: var(--warning-color)
  custom_fields:
    rail0_top: ''
    rail1_top: ''
    rail2_top: ''
    rail3_top: ''
    rail4_top: ''
    rail0_bottom: ''
    rail1_bottom: ''
    rail2_bottom: ''
    rail3_bottom: ''
    rail4_bottom: ''
    station: ''
  show_icon: false
  show_label: true
  show_state: true
  triggers_update: all
  styles:
    grid:
      - grid-template-columns: min-content min-content min-content min-content min-content min-content min-content auto min-content
      - grid-template-rows: min-content min-content
      - grid-template-areas: '"rail0_top rail1_top rail2_top rail3_top rail4_top station i n s" "rail0_bottom rail1_bottom rail2_bottom rail3_bottom rail4_bottom station i l s"'
      - xoverflow: visible
    card:
      - margin: 0
      - padding: 0
      - background: none
      - font-size: var(--body-font-size)
      - text-align: left
      - min-height: 56px
      - xoverflow: visible
    name:
      - place-self: center start
      - margin-left: 80px
      - xtransform-origin: center left
      - xtransform: rotate(-45deg)
    label:
      - place-self: center start
      - margin-left: 80px
      - color: var(--secondary-text-color)
      - xtransform-origin: center left
      - xtransform: translateX(12px) translateY(-8px) rotate(-45deg)
    state:
      - place-self: center end
    custom_fields:
      station:
        - position: absolute
        - left: '[[[ return ((variables.station_size_from * 12)) + "px" ]]]'
        - width: '[[[ return (((variables.station_size_to - variables.station_size_from) * 12) + 4) + "px" ]]]'
        - height: 8px
        - margin-top: 1px
        - border-radius: 8px
        - border: 2px solid white
        - background: var(--station-color)
  extra_styles: |
    [[[
      var extra_styles = ''
      for (let rail = 0; rail <= 4; rail++) {
        var style = `
          #rail${ rail }_top {
            display: ${ (variables['rail' + rail + '_top_entity'] == null) ? 'none' : 'block' };
            position: absolute;
            top: 0;
            left: ${ rail * 12 }px;
            width: 0;
            height: 50%;
            --rail-color:
              ${ variables['rail' + rail + '_top_entity'] != null
                  ? states[variables['rail' + rail + '_top_entity']].attributes[variables.condition_attribute] != undefined
                    ? states[variables['rail' + rail + '_top_entity']].attributes[variables.condition_attribute] >= variables.condition_threshold
                      ? variables.mid_color
                      : variables.on_color
                    : variables.off_color
                  : 'transparent'
              };
            border-left: 8px solid var(--rail-color);
          }
          #rail${ rail }_bottom {
            display: ${ (variables['rail' + rail + '_bottom_entity'] == null) ? 'none' : 'block' };
            position: absolute;
            top: 50%;
            left: ${ rail * 12 }px;
            width: 0;
            height: 50%;
            --rail-color:
              ${ variables['rail' + rail + '_bottom_entity'] != null
                  ? states[variables['rail' + rail + '_bottom_entity']].attributes[variables.condition_attribute] != undefined
                    ? states[variables['rail' + rail + '_bottom_entity']].attributes[variables.condition_attribute] >= variables.condition_threshold
                      ? variables.mid_color
                      : variables.on_color
                    : variables.off_color
                  : 'transparent'
              };
            border-left: 8px solid var(--rail-color);
          }
        `
        extra_styles = extra_styles + style
      }
      var stationStyle = `
        #station {
          --station-color:
            ${ entity != null
                ? entity.attributes[variables.condition_attribute] != undefined
                  ? entity.attributes[variables.condition_attribute] >= variables.condition_threshold
                    ? variables.mid_color
                    : variables.on_color
                  : variables.off_color
                : 'transparent'
            }
          }
        `
      return extra_styles + stationStyle
    ]]]

rail_section_row:
  template: rail_station_row
  variables:
    line_style: 2px dotted rgba(255,255,255,.5)
  custom_fields:
    section: ''
  styles:
    grid:
      - grid-template-columns: min-content min-content min-content min-content min-content min-content min-content auto min-content
      - grid-template-rows: min-content min-content 0
      - grid-template-areas: '"rail0 rail1 rail2 rail3 rail4 station i n s" "rail0 rail1 rail2 rail3 rail4 station i l s" "section section section section section section . . ."'
    custom_fields:
      section:
        - position: absolute
        - top: 50%
        - left: 0
        - width: 68px
        - height: 0
        - border-top: '[[[ return variables.line_style ]]]'
