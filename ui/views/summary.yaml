# MAXIMALIST DASHBOARD
# Summary View
# Made by Madelena Mak 2022

title: Summary
icon: 'mdi:home-circle'
path: 'summary'

# Most of the layouts are based on CSS Grids using layout-card.
# The cards are first set inside a layout card for margins
# and then inside another layout card for the columns for the top half,
# while the bottom half is a layout-card in masonry layout.

# Learn more about CSS Grids:
# https://css-tricks.com/snippets/css/complete-guide-grid/

type: 'custom:grid-layout'
layout:
  grid-template-rows: auto 32px
  grid-template-columns: 8px 1fr 8px
  grid-template-areas: |
    ". cc ." ". . ."
  margin: 0
  card_margin: 0
  mediaquery:
    '(min-width: 1704px)':
      grid-template-columns: auto 1600px auto
      grid-template-areas: |
        ". cc ." ". . ."
    '(min-width: 1200px)':
      grid-template-columns: 0 auto 0
      grid-template-areas: |
        ". cc ."
      grid-column-gap: 32px

cards:

  - type: 'custom:layout-card'
    layout_type: 'custom:grid-layout'

    layout:
      grid-template-columns: >-
        calc( 20% - 24px ) calc( 20% - 24px ) calc( 20% - 24px ) calc( 20% - 24px ) calc(
        20% - 24px )
      grid-column-gap: 32px
      grid-template-areas: |
        "h h h h h"
        "c1 fp fp c2 c3"
      mediaquery:
        '(max-width: 512px)':
          grid-template-columns: 1fr
          grid-template-areas: |
            "h"
            "fp"
            "c1"
            "c2"
          margin: 0
        '(max-width: 800px)':
          grid-template-columns: 1fr 1fr
          grid-template-areas: |
            "h h"
            "fp fp"
            "c1 c2"
          margin: 0
        '(max-width: 1128px)':
          grid-template-columns: 1fr 1fr 1fr
          grid-template-areas: |
            "h h h"
            "c1 fp fp"
            "c2 none none"
          margin: 0
        '(max-width: 1440px)':
          grid-template-columns: >-
            calc( 25% - 24px ) calc( 25% - 24px ) calc( 25% - 24px ) calc(
            25% - 24px )
          grid-template-areas: |
            "h h h h"
            "c1 fp fp c2"
          margin: 0
      margin: 0

    view_layout:
      grid-area: cc

    cards:

      # [Header] Greetings

      - type: custom:state-switch
        entity: user
        default: default
        view_layout:
          grid-area: h
        states:
          Maddy:
            type: 'custom:layout-card'
            layout_type: 'custom:grid-layout'

          default:
            type: 'custom:layout-card'
            layout_type: 'custom:grid-layout'
            layout:
              grid-template-columns: auto min-content
              grid-template-rows: auto
              margin: -1px -1px -1px -1px
              padding: 0
            cards:
                
              - type: markdown
                content: >
                  # {% if now() > today_at('18:00') %}Good evening{% elif
                  now() > today_at('12:00') %}Good afternoon{% elif now() >
                  today_at('5:00') %}Good morning{% else %}Good night{%
                  endif %}, {{ user }}.
                style:
                  .: |
                    ha-card {
                      background: none;
                      margin-bottom: -16px;
                    }
                  ha-markdown$: |
                    h1 {
                      font-size: var(--title-font-size);
                      font-weight: 500;
                      line-height: 1.1;
                      margin-left: -2px;
                      margin-top: -12px !important;
                    }

              - type: 'custom:layout-card'
                layout_type: 'custom:horizontal-layout'
                cards:
                  - type: 'custom:mushroom-person-card'
                    entity: person.madelena
                    style: 'ha-card {background: none;}'
                    use_entity_picture: true
                    view_layout: null
                layout:
                  width: 160
                  margin: -1
                view_layout:
                  place-self: center
                  show:
                    mediaquery: '(min-width: 800px)'

              - type: 'custom:layout-card'
                layout_type: 'custom:horizontal-layout'
                cards:
                  - type: 'custom:mushroom-person-card'
                    entity: person.madelena
                    use_entity_picture: true
                    hide_state: true
                    hide_name: true
                    style: |
                      ha-card {background: none;
                        margin-top: 16px;
                        transform: scale(1.5) translate(-8px);
                      }
                layout:
                  width: 72
                view_layout:
                  place-self: start
                  show:
                    mediaquery: '(max-width: 799.99px)'


      # [Floor Plan Diagram] USS Strawberry Fields

      - type: 'custom:layout-card'
        layout_type: 'custom:grid-layout'
        layout:
          margin: -1px
        view_layout:
          grid-area: fp
        cards:

          - type: custom:state-switch
            entity: user
            default: default
            states:
              default: &summary-floorplan-header
                type: 'custom:button-card'
                template: header_card
                variables:
                  name: U.S.S. STRAWBERRY FIELDS
                  label: Areas
                  link: /config/areas/dashboard
              Maddy:
                <<: *summary-floorplan-header
                styles:
                  card:
                    - margin-top: -20px

          - type: 'custom:floorplan-card'
            config:
              image:
                location: /local/uss-strawberry-fields.svg
                cache: false
              stylesheet: /local/ha-floorplan.css
              defaults:
                hover_action: hover-info
                tap_action: more-info
              rules:

                - entity: group.bedroom_lights
                  element: group.bedroom_lights.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "bg-on" : "bg-off"}'

                - entity: group.kitchen_lights
                  element: group.kitchen_lights.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "bg-on" : "bg-off"}'

                - entity: group.workspace_lights
                  element: group.workspace_lights.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "bg-on" : "bg-off"}'

                - entity: group.living_room_lights
                  element: group.living_room_lights.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "bg-on" : "bg-off"}'

                - entity: sensor.workspace_room_hue_sensor_temperature
                  tap_action: more-info
                  state_action:
                    action: call-service
                    service: floorplan.text_set
                    service_data: '${entity.state}'

                - entities:
                    - binary_sensor.bedroom_hue_sensor_motion
                    - binary_sensor.kitchen_counter_motion_sensor_motion
                    - binary_sensor.workspace_room_hue_sensor_motion
                    - binary_sensor.living_room_hue_sensor_motion
                  state_action:
                    action: call-service
                    service: floorplan.text_set
                    service_data: '${(entity.state === "on") ? "Detected" : "Clear"}'

                - entity: binary_sensor.bedroom_hue_sensor_motion
                  element: binary_sensor.bedroom_hue_sensor_motion.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "bg-on" : "bg-off"}'

                - entity: binary_sensor.kitchen_counter_motion_sensor_motion
                  element: >-
                    binary_sensor.kitchen_counter_motion_sensor_motion.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "bg-on" : "bg-off"}'

                - entity: binary_sensor.workspace_room_hue_sensor_motion
                  element: binary_sensor.workspace_room_hue_sensor_motion.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "bg-on" : "bg-off"}'

                - entity: binary_sensor.living_room_hue_sensor_motion
                  element: binary_sensor.living_room_hue_sensor_motion.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "bg-on" : "bg-off"}'

                - entities:
                    - binary_sensor.bathroom_leak_sensor_wet
                    - binary_sensor.kitchen_leak_sensor_ias_zone
                  state_action:
                    action: call-service
                    service: floorplan.text_set
                    service_data: '${(entity.state === "on") ? "Wet" : "Dry"}'

                - entity: binary_sensor.bathroom_leak_sensor_wet
                  element: binary_sensor.bathroom_leak_sensor_wet.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: >-
                        ${(entity.state === "on") ? "bg-urgent" :
                        "bg-off"}

                - entity: binary_sensor.kitchen_leak_sensor_ias_zone
                  element: binary_sensor.kitchen_leak_sensor_ias_zone.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: >-
                        ${(entity.state === "on") ? "bg-urgent" :
                        "bg-off"}

                - entities:
                    - group.bedroom_lights
                    - group.workspace_lights
                    - group.living_room_lights
                    - group.kitchen_lights
                    - binary_sensor.bedroom_air_conditioner_power
                  state_action:
                    action: call-service
                    service: floorplan.text_set
                    service_data: '${entity.state}'

                - entities:
                    - >-
                      binary_sensor.bedroom_window_sensor_center_ias_zone
                    - >-
                      binary_sensor.living_room_window_sensor_center_ias_zone
                  state_action:
                    action: call-service
                    service: floorplan.text_set
                    service_data: '${(entity.state === "on") ? "Open" : "Closed"}'

                - entity: binary_sensor.bedroom_window_sensor_center_ias_zone
                  element: >-
                    binary_sensor.bedroom_window_sensor_center_ias_zone.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "bg-on" : "bg-off"}'

                - entity: >-
                    binary_sensor.living_room_window_sensor_center_ias_zone
                  element: >-
                    binary_sensor.living_room_window_sensor_center_ias_zone.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "bg-on" : "bg-off"}'

                - entities:
                    - sensor.bathroom_env_sensor_temperature
                    - sensor.workspace_room_hue_sensor_temperature
                    - sensor.bedroom_hue_sensor_temperature
                    - sensor.living_room_hue_sensor_temperature
                  state_action:
                    action: call-service
                    service: floorplan.text_set
                    service_data: '${entity.state + " °C"}'

                - entity: >-
                    sensor.bathroom_env_sensor_temperature
                  element: >-
                    sensor.bathroom_env_sensor_temperature.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state > 27) || (entity.state < 20) ? "bg-on" : "bg-off"}'

                - entity: >-
                    sensor.workspace_room_hue_sensor_temperature
                  element: >-
                    sensor.workspace_room_hue_sensor_temperature.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state > 27) || (entity.state < 20) ? "bg-on" : "bg-off"}'

                - entity: >-
                    sensor.bedroom_hue_sensor_temperature
                  element: >-
                    sensor.bedroom_hue_sensor_temperature.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state > 27) || (entity.state < 20) ? "bg-on" : "bg-off"}'

                - entity: >-
                    sensor.living_room_hue_sensor_temperature
                  element: >-
                    sensor.living_room_hue_sensor_temperature.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state > 27) || (entity.state < 20) ? "bg-on" : "bg-off"}'

                - entity: >-
                    sensor.workspace_room_hue_sensor_temperature
                  element: >-
                    sensor.workspace_room_hue_sensor_temperature.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state > 27) || (entity.state < 20) ? "bg-on" : "bg-off"}'

                - entity: binary_sensor.bedroom_air_conditioner_power
                  element: bedroom.climate.icon
                  tap_action: false
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "icon-spinning" : "icon"}'

                - entity: >-
                    binary_sensor.bedroom_air_conditioner_power
                  element: >-
                    bedroom.climate.bg
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: '${(entity.state === "on") ? "bg-on" : "bg-off"}'
                  tap_action:
                    action: call-service
                    service: homeassistant.toggle
                    service_data:
                      entity_id: switch.bedroom_air_conditioner
                    confirmation:
                      text: Switch Bedroom Air Conditioner?

                - element: workspace.pointer
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: >-
                        ${((states["group.workspace_lights"].state ===
                        "on") |
                        (states["binary_sensor.workspace_room_hue_sensor_motion"].state
                        === "on")) ? "bg-on" : "bg-off"}

                - element: bedroom.pointer
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: >-
                        ${((states["group.bedroom_lights"].state ===
                        "on") |
                        (states["binary_sensor.bedroom_hue_sensor_motion"].state
                        === "on") |
                        (states["binary_sensor.bedroom_window_sensor_center_ias_zone"].state
                        === "on")) ? "bg-on" : "bg-off"}

                - element: livingroom.pointer
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: >-
                        ${((states["group.living_room_lights"].state ===
                        "on") |
                        (states["binary_sensor.living_room_hue_sensor_motion"].state
                        === "on") |
                        (states["binary_sensor.living_room_window_sensor_center_ias_zone"].state
                        === "on")) ? "bg-on" : "bg-off"}

                - element: kitchen.pointer
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: >-
                        ${((states["group.kitchen_lights"].state ===
                        "on") |
                        (states["binary_sensor.kitchen_counter_motion_sensor_motion"].state
                        === "on")) ? "bg-on" : "bg-off"}

                - element: bathroom.pointer
                  state_action:
                    action: call-service
                    service: floorplan.class_set
                    service_data:
                      class: >-
                        ${((states["binary_sensor.bathroom_leak_sensor_wet"].state
                        === "on")) ? "bg-urgent" : "bg-off"}

            card_mod:
              style: |
                ha-card {background: none;}


      # [Column] Energy / Security

      - type: 'custom:layout-card'
        layout_type: 'custom:grid-layout'
        layout:
          margin: 0
          card_margin: 1px
        view_layout:
          grid-area: c1
        cards:

          - type: 'custom:layout-card'
            layout_type: 'custom:grid-layout'
            layout:
              grid-template-columns: >-
                repeat(auto-fill, [col-start] minmax(112px, 1fr)
                [col-end])
              margin: 0
              card_margin: 1px
              padding: 0
            cards:

              - type: custom:state-switch
                entity: user
                default: default
                view_layout:
                  grid-column: 1/-1
                states:
                  default: &summary-energy-header
                    type: 'custom:button-card'
                    template: header_card
                    variables:
                      name: ENERGY
                      label: More
                      link: /ui-dashboard/energy
                  Maddy:
                    <<: *summary-energy-header
                    styles:
                      card:
                        - margin-top: -20px

              - type: 'custom:decluttering-card'
                template: mini_graph_tile
                view_layout:
                  grid-column: span 2
                variables:
                  - aspect_ratio: 2/1
                  - points_per_hour: 4
                  - entities:
                      - entity: sensor.total_energy_use
                  - title: Total Energy Usage
                  - icon: 'mdi:home-lightning-bolt'
                  - line_width: 2

          - type: 'custom:layout-card'
            layout_type: 'custom:grid-layout'
            layout:
              grid-template-columns: >-
                repeat(auto-fill, [col-start] minmax(112px, 1fr)
                [col-end])
              margin: 0
              card_margin: 1px
            cards:

              - type: 'custom:button-card'
                template: header_card
                variables:
                  name: SECURITY
                  label: More
                  link: /ui-dashboard/security
                view_layout:
                  grid-column: 1/-1

              - type: 'custom:button-card'
                template:
                  - live_tile_card
                  - live_tile_with_long_state
                  - live_tile_with_state_countdown
                entity: binary_sensor.front_door_switchbot_contact_sensor_door_open
                name: Front Door
                triggers_update: all
                state_display: |
                  [[[
                    var lockState = states["lock.front_door_lock"].state
                    return (lockState.charAt(0).toUpperCase() + lockState.slice(1)) + " + " + ((entity.state == "on") ? "Open" : "Closed")
                  ]]]
                styles:
                  grid:
                    - background: |
                        [[[
                          if (entity.state == "on") { return "var(--accent-color)" }
                          if (states["lock.front_door_lock"].state == "unlocked") { return "rgb(var(--rgb-primary-color), .5)" }
                          return "var(--ha-card-background)"
                        ]]]
                variables:
                  aspect_ratio: '[[[ return Math.round(this.offsetWidth / 112) ]]]'
                  duration: 300
                view_layout:
                  grid-column: 1/-2

              - type: 'custom:button-card'
                template:
                  - live_tile
                entity: alarm_control_panel.alexa_guard
                show_state: false
                state:
                  - value: armed_away
                    color: 'rgb(var(--rgb-primary-color))'
                    icon: mdi:shield-home
                  - value: disarmed
                    color: >-
                      [[[ return iif( person.madelena.state == "home",
                      "none", "rgb(var(--rgb-primary-color))") ]]]
                    icon: mdi:shield-off

              - type: 'custom:button-card'
                template: live_tile_with_camera
                entity: camera.front_door_camera
                name: Front Door

              - type: 'custom:swipe-card'
                parameters:
                  direction: vertical
                  autoHeight: true
                  height: 112
                  effect: cube
                  cubeEffect:
                    - slideShadows: false
                  xautoplay:
                    delay: 60000
                cards: !include secret/summary-cameras.yaml


      # [Column] Network / Lights

      - type: 'custom:layout-card'
        layout_type: 'custom:grid-layout'
        layout:
          margin: 0
          padding: 0
          card_margin: 1px
        view_layout:
          grid-area: c2
          show:
            mediaquery: '(min-width: 1128.1px), (max-width: 800px)'
        cards:

          - type: 'custom:layout-card'
            layout_type: 'custom:grid-layout'
            cards: &summary-column-network-cards

              - type: 'custom:button-card'
                template: header_card
                view_layout:
                  grid-column: 1/-1
                variables:
                  name: NETWORK
                  label: More
                  link: /ui-dashboard/1

              - type: 'custom:button-card'
                template:
                  - live_tile_card
                  - live_tile_with_long_state
                  - live_tile_with_state_countdown
                entity: binary_sensor.ping_cloudflare
                name: WAN
                state:
                  - value: 'off'
                    styles:
                      card:
                        - background: var(--primary-color)
                  - value: 'on'
                    styles:
                      card:
                        - background: var(--ha-card-background)
                        - color: var(--primary-text-color)
                variables:
                  aspect_ratio: '[[[ return Math.round(this.offsetWidth / 112) ]]]'
                view_layout:
                  grid-column: 1/-2

              - type: 'custom:decluttering-card'
                template: mini_graph_tile
                variables:
                  - entities:
                      - entity: sensor.valhalla_router_connected_devices
                  - title: Devices Connected
                  - unit: Devices

              - type: 'custom:decluttering-card'
                template: mini_graph_tile
                variables:
                  - entities:
                      - entity: sensor.speedtest_download
                  - title: Download Speed

              - type: 'custom:decluttering-card'
                template: mini_graph_tile
                variables:
                  - entities:
                      - entity: sensor.speedtest_upload
                  - title: Upload Speed

            layout:
              grid-template-columns: >-
                repeat(auto-fill, [col-start] minmax(112px, 1fr)
                [col-end])
              margin: 0
              card_margin: 1px

          - type: 'custom:layout-card'
            layout_type: 'custom:grid-layout'
            cards: &summary-column-lights-cards

              - type: 'custom:button-card'
                template: header_card
                variables:
                  name: LIGHTS
                  label: All Lights
                  link: /ui-dashboard/lights
                view_layout:
                  grid-column: 1/-1

              - view_layout:
                  grid-column: span 2
                type: 'custom:button-card'
                template:
                  - light_button_card_group
                  - require_confirmation
                entity: group.all_lights
                name: All Lights
                icon: 'mdi:lightbulb-multiple'
                variables:
                  aspect_ratio: 2/1
                state:
                  - value: 'on'
                    label: >-
                      [[[ return
                      states["group.all_lights"].attributes.entity_id.filter(entity
                      => states[entity].state == "on").length + " lights
                      are on" ]]]

            layout:
              grid-template-columns: >-
                repeat(auto-fill, [col-start] minmax(112px, 1fr)
                [col-end])
              margin: 0
              card_margin: 1px


      # [Column] Maintenance / Devices

      - type: 'custom:layout-card'
        layout_type: 'custom:grid-layout'
        layout:
          margin: 0
        view_layout:
          grid-area: c3
          show:
            mediaquery: '(min-width: 1440.01px)'
        cards: &summary-column-maintenance-device-cards

          - type: 'custom:layout-card'
            layout_type: 'custom:grid-layout'
            layout: !include snippets/layout-live-tile.yaml
            cards:

              - type: 'custom:button-card'
                template: header_card_no_link
                variables:
                  name: MAINTENANCE
                  label: More
                  link: /ui-dashboard/maintenance
                view_layout:
                  grid-column: 1/-1

              - type: 'custom:button-card'
                template:
                  - live_tile_card
                  - live_tile_with_long_state
                variables:
                  aspect_ratio: 2
                name: |
                  [[[
                    var choresOverdue = states["sensor.chores_overdue"].attributes.entities.length
                    var choresToDo = states["sensor.chores_to_do"].attributes.entities.length
                    if (choresOverdue > 0 || choresToDo > 0) {
                      var chores = choresOverdue + choresToDo
                      if (chores == 1) { return "Just 1 Chore!" } else { return chores + " Chores" }
                    }
                    return "Chores"
                  ]]]
                state_display: |
                  [[[
                    if (states["sensor.chores_overdue"].attributes.entities.length < 1 && states["sensor.chores_to_do"].attributes.entities.length < 1) { return "🦄 All Done!" }
                  ]]]
                xstate_display: |
                  [[[
                    var chores = ''
                    var choresOverdue = states["sensor.chores_overdue"].attributes.entities.length
                    var choresToDo = states["sensor.chores_to_do"].attributes.entities.length
                    if (choresOverdue > 0) { chores = choresOverdue + " Overdue" }
                    if (choresOverdue > 0 && choresToDo > 0) { chores = chores + " + " }
                    if (choresToDo > 0) { chores = chores + choresToDo + " to Do" }
                    return chores
                  ]]]
                label: |
                  [[[
                    var chores = ''
                    var choresOverdue = states["sensor.chores_overdue"].attributes.entities
                    for (let e in choresOverdue) {
                      chores = chores + "<li>" + states[choresOverdue[e]].attributes.friendly_name + "</li>"
                    }
                    var choresToDo = states["sensor.chores_to_do"].attributes.entities
                    for (let e in choresToDo) {
                      chores = chores + "<li>" + states[choresToDo[e]].attributes.friendly_name + "</li>"
                    }
                    return chores
                  ]]]
                icon: mdi:clipboard-check-outline
                styles:
                  card:
                    - background: |
                        [[[
                          if (states["sensor.chores_overdue"].attributes.entities.length > 0) { return "var(--primary-color)" }
                          if (states["sensor.chores_to_do"].attributes.entities.length > 0) { return "rgba(var(--rgb-primary-color), .5)" }
                          return "var(--ha-card-background)"
                        ]]]
                    - color: |
                        [[[
                          if (states["sensor.chores_overdue"].attributes.entities.length > 0) { return "var(--accent-text-color)" }
                          if (states["sensor.chores_to_do"].attributes.entities.length > 0) { return "var(--primary-text-color)" }
                          return "var(--disabled-text-color)"
                        ]]]
                  label:
                    - padding-top: 8px
                  state:
                    - padding-top: 8px
                tap_action:
                  action: navigate
                  navigation_path: /ui-dashboard/maintenance
                triggers_update:
                  - sensor.chores_overdue
                  - sensor.chores_to_do
                extra_styles: |
                  li {
                    list-style: square;
                  }
                  li:before {
                    content: "";
                    margin-left: -8px;
                  }
                view_layout:
                  grid-column: span 2

              # - type: 'custom:button-card'
              #   template:
              #     - live_tile_card
              #   entity: sensor.octoprint_current_state
              #   name: Plants

          - type: 'custom:layout-card'
            layout_type: 'custom:grid-layout'
            layout: !include snippets/layout-live-tile.yaml
            cards:

              - type: 'custom:button-card'
                template: header_card
                variables:
                  name: DEVICES
                  label: All Devices
                  link: /ui-machines
                view_layout:
                  grid-column: 1/-1

              - type: 'custom:state-switch'
                entity: binary_sensor.octoprint_printing
                default: "off"
                states:
                  "on":
                    type: 'custom:button-card'
                    template:
                      - live_tile_card
                      - live_tile_with_accent_percent_bar
                    entity: sensor.octoprint_job_percentage
                    name: Genesis
                    state_display: |
                      [[[
                        return Math.round(states['sensor.octoprint_job_percentage'].state * 10)/10 + '<span style="font-size: var(--h6-font-size); font-weight: 500; opacity: .66;"> %</span>'
                      ]]]
                    label: |
                      [[[
                        return 'Finishing ' + moment(states['sensor.octoprint_estimated_finish_time'].state).fromNow()
                      ]]]
                  "off":
                    type: 'custom:button-card'
                    template:
                      - live_tile_card
                      - live_tile_with_long_state
                      - live_tile_with_last_changed_label
                    entity: sensor.octoprint_current_state
                    name: Genesis
                    state:
                      - value: Operational
                        color: 'rgba(var(--rgb-primary-color),.33)'

              - type: 'custom:button-card'
                template:
                  - live_tile_card
                  - live_tile_with_long_state
                  - live_tile_with_last_changed_label
                entity: vacuum.peanut_hamper
                name: Peanut Hamper
                state:
                  - value: docked
                    color: 'off'
                  - value: cleaning
                    color: 'rgb(var(--rgb-primary-color),.33)'
                  - value: error
                    color: 'rgba(var(--rgb-primary-color))'
                  - value: idle
                    color: 'rgba(var(--rgb-primary-color))'
                  - value: returning
                    color: 'rgb(var(--rgb-primary-color),.33)'
                  - operator: default
                    color: 'var(--primary-color)'
                state_display: >-
                  [[[ 
                    if (entity.state == "error") { return entity.attributes.error }
                    if (entity.attributes.bin_full) { return 'Bin full' }
                    if (!entity.attributes.bin_present) { return 'Bin not present' }
                  ]]]
                styles:
                  state:
                    - text-transform: capitalize
                  card:
                    - background: |
                        [[[
                          if (entity.attributes.bin_full) { return 'var(--accent-color)' }
                        ]]]

              - type: 'custom:decluttering-card'
                template: mini_graph_tile
                variables:
                  - entities:
                      - entity: sensor.dorothy_intel_core_i5_750_load_cpu_total
                  - title: Dorothy
                  - icon: 'mdi:cpu-64-bit'

              - type: 'custom:decluttering-card'
                template: mini_graph_tile
                variables:
                  - entities:
                      - entity: sensor.unison_processor_use
                  - title: Unison

      # Begin Masonry Layout here.

      - type: 'custom:layout-card'
        layout_type: 'custom:grid-layout'
        layout:
          grid-template-areas: '". mc ."'
          grid-template-columns: 0 auto 0
          margin: -1px
          mediaquery:
            '(max-width: 512px)':
                grid-template-columns: 16px auto 16px
        view_layout:
          grid-column: 1/-1
        cards:

          - type: 'custom:layout-card'
            layout_type: 'custom:horizontal-layout'
            layout:
              width: 256
              max_width: 512
              max_cols: 5
              card_margin: 0 16px
              margin: 0 -16px
            view_layout:
              grid-area: mc
            cards:

              # [Column] Network (Repeat)

              - type: 'custom:layout-card'
                layout_type: 'custom:grid-layout'
                layout:
                  grid-template-columns: >-
                    repeat(auto-fill, [col-start] minmax(112px, 1fr)
                    [col-end])
                  margin: 0
                  card_margin: 1px
                view_layout:
                  show:
                    mediaquery: '(min-width: 800.1px) and (max-width: 1128px)'
                cards: *summary-column-network-cards


              # [Column] Maintenance (Repeat) / Devices (Repeat)

              - type: 'custom:layout-card'
                layout_type: 'custom:grid-layout'
                layout:
                  margin: 0
                view_layout:
                  show:
                    mediaquery: '(max-width: 1440px)'
                cards: *summary-column-maintenance-device-cards


              # [Column] Light (Repeat) / Me

              - type: 'custom:layout-card'
                layout_type: 'custom:grid-layout'
                layout:
                  margin: -1
                cards:

                  - type: 'custom:layout-card'
                    layout_type: 'custom:grid-layout'
                    layout:
                      grid-template-columns: >-
                        repeat(auto-fill, [col-start] minmax(112px, 1fr)
                        [col-end])
                      margin: -1
                    view_layout:
                      show:
                        mediaquery: '(min-width: 800.1px) and (max-width: 1128px)'
                    cards: *summary-column-lights-cards

                  - type: 'custom:layout-card'
                    layout_type: 'custom:grid-layout'
                    layout: !include snippets/layout-live-tile.yaml
                    cards:

                      - type: 'custom:button-card'
                        template: header_card
                        variables:
                          name: ME
                          label: More
                          link: /ui-dashboard/me
                        view_layout:
                          grid-column: 1/-1

                      - type: 'custom:button-card'
                        template: live_tile
                        entity: sensor.anniversary_cake_day
                        state_display: >-
                          [[[ return
                          states["sensor.anniversary_days_on_earth"].state ]]]
                        name: >-
                          [[[ return "Cake Day in " +
                          states["sensor.anniversary_cake_day"].state + " Days" ]]]
                        label: >-
                          [[[ return "Week " +
                          -states["sensor.anniversary_days_on_earth"].attributes.weeks_remaining
                          ]]]
                        icon: 'mdi:cake-variant'
                        view_layout:
                          grid-column: span 2
                        variables:
                          aspect_ratio: 2/1
                        styles:
                          card:
                            - background-image: |
                                [[[
                                  var diff = entity.state
                                  if (diff > 120) { return '' }
                                  var opacity = 1 - (diff / 120)
                                  return 'linear-gradient( rgba(var(--rgb-primary-color),' + opacity + '), rgba(var(--rgb-primary-color),' + opacity + '))'
                                ]]]

                      - type: 'custom:decluttering-card'
                        template: mini_graph_tile
                        variables:
                          - entities:
                              - entity: sensor.withings_sleep_score_madelena
                          - title: Sleep Score
                          - hours_to_show: 96

                      - type: 'custom:decluttering-card'
                        template: mini_graph_tile
                        variables:
                          - entities:
                              - entity: sensor.my_twitter_followers_count
                          - title: Twitter
                          - icon: 'mdi:twitter'
                          - hours_to_show: 96


              # [Column] Weather

              - type: 'custom:layout-card'
                layout_type: 'custom:grid-layout'
                layout: !include snippets/layout-live-tile.yaml
                cards:
                  - type: 'custom:button-card'
                    template: header_card
                    variables:
                      name: WEATHER
                      label: More
                      link: /ui-dashboard/neighborhood
                    view_layout:
                      grid-column: 1/-1

                  - type: 'custom:button-card'
                    template: live_tile
                    icon: |
                      [[[
                        var weatherIconDict = {
                          'partlycloudy': 'partly-cloudy',
                          'clear-night': 'night'
                        }
                        var weatherIcon = weatherIconDict[entity.state]
                        if (weatherIcon == null) {weatherIcon = entity.state}
                        return "mdi:weather-" + weatherIcon
                      ]]]
                    name: |
                      [[[ 
                        var weatherNameDict = {
                          'partlycloudy': 'Partly Cloudy',
                          'clear-night': 'Clear Night'
                        }
                        var weatherName = weatherNameDict[entity.state]
                        if (weatherName == null) {weatherName = entity.state}
                        return weatherName
                      ]]]
                    label: |
                      [[[
                        var tempForecast = entity.attributes.forecast.map((item) => { return item.temperature }).slice(0, 4)
                        if (states['sensor.valhalla_hourly_forecast_temperature_rising'] == 'Rising') {
                          return '↗ ' + Math.max(...tempForecast) + '°'                      
                        } else {
                          return '↘ ' + Math.min(...tempForecast) + '°'
                        }
                      ]]]
                    state_display: >-
                      [[[ return Math.round(entity.attributes.temperature) + "°"
                      ]]]
                    entity: weather.valhalla_hourly
                    styles:
                      name:
                        - width: 50%
                      grid:
                        - background: var(--ha-card-background)
                      card:
                        - background: |
                            [[[
                              var temp = parseFloat(entity.attributes.temperature)
                              if (temp >= 25) {
                                return "rgba(var(--rgb-primary-color)," + ((temp - 25) / 7) + ")"
                              }
                              if (temp <= 20) {
                                return "rgba(var(--rgb-primary-color)," + ((20 - temp) / 14) + ")"
                              }
                              return "transparent"
                            ]]]

                  - type: 'custom:button-card'
                    template: live_tile
                    variables:
                      day: |
                        [[[
                          var hour = new Date
                          hour = parseInt( hour.getHours() )
                          if (hour < 4) { return 1 }
                          if (hour < 21) { return 0 } else { return 1 }
                        ]]]
                    entity: weather.valhalla_2
                    name: Precipitation
                    state_display: '[[[ return entity.attributes.forecast[variables.day].precipitation_probability + "%" ]]]'
                    icon: '[[[ return (entity.attributes.forecast[variables.day].precipitation_probability >= 33) ? "mdi:water" : "mdi:water-outline" ]]]'
                    label: '[[[ return entity.attributes.forecast[variables.day].precipitation ]]]'
                    show_units: false
                    styles:
                      grid:
                        - background: '[[[ return "rgba(var(--rgb-primary-color)," + (parseInt(entity.attributes.forecast[variables.day].precipitation_probability)/100) + ")" ]]]'
                      card:
                        - background: var(--ha-card-background)

                  - type: 'custom:button-card'
                    template: live_tile
                    entity: sensor.waqi_newyork_air_quality_index
                    state_display: |
                      [[[ return Math.round(entity.state) ]]]
                    variables:
                      level: |
                        [[[
                          if (entity.state > 300) {
                            return "Hazardous"
                          } else if (entity.state > 200) {
                            return "Very Unhealthy"
                          } else if (entity.state > 150) {
                            return "Unhealthy"
                          } else if (entity.state > 100) {
                            return "Unhealthy for Sensitive Groups"
                          } else if (entity.state > 50) {
                            return "Moderate"
                          } else {
                            return "Good"
                          }
                        ]]]
                    name: AQI
                    icon: mdi:molecule
                    label: '[[[ return variables.level ]]]'
                    show_units: false
                    styles:
                      card:
                        - background: |
                            [[[
                              if (entity.state > 300) {
                                return "maroon"
                              } else if (entity.state > 200) {
                                return "purple"
                              } else if (entity.state > 150) {
                                return "rgba(var(--rgb-primary-color),1)"
                              } else if (entity.state > 100) {
                                return "rgba(var(--rgb-primary-color),.66)"
                              } else if (entity.state > 50) {
                                return "rgba(var(--rgb-primary-color),.33)"
                              } else {
                                return "var(--ha-card-background)"
                              }
                            ]]]
                    view_layout:
                      show:
                        mediaquery: "(min-width: 1129px)"

                  - type: 'custom:button-card'
                    template:
                      - live_tile_card
                      - live_tile_with_long_state
                    entity: sensor.tomorrow_io_valhalla_tree_pollen_index
                    variables:
                      label: |
                        [[[
                          return "Grass - " + states['sensor.tomorrow_io_valhalla_grass_pollen_index'].state + "<br>Tree - " + states['sensor.tomorrow_io_valhalla_tree_pollen_index'].state + "<br>Weed - " + states['sensor.tomorrow_io_valhalla_weed_pollen_index'].state
                        ]]]
                      state: |
                        [[[
                          var sum = "Grass - " + states['sensor.tomorrow_io_valhalla_grass_pollen_index'].state + "<br>Tree - " + states['sensor.tomorrow_io_valhalla_tree_pollen_index'].state + "<br>Weed - " + states['sensor.tomorrow_io_valhalla_weed_pollen_index'].state
                          if (sum.includes('very_high')) {return 'Very High' }
                          if (sum.includes('high')) {return 'High' }
                          if (sum.includes('medium')) {return 'Medium' }
                          if (sum.includes('very_low')) {return 'Very Low' }
                          if (sum.includes('low')) {return 'Low' }
                          return 'None'
                        ]]]
                    name: Pollen
                    state_display: '[[[ return variables.state ]]]'
                    label: '[[[ return variables.label.replace("_", " ") ]]]'
                    styles:
                      card:
                        - color: |
                            [[[
                              switch(variables.state) {
                                case 'None': return 'var(--disabled-text-color)'
                                case 'Very Low': return 'var(--primary-text-color)'
                                case 'Low': return 'var(--primary-text-color)'
                                default: return 'var(--text-accent-color)'
                              }
                            ]]]
                        - background: |
                            [[[
                              switch(variables.state) {
                                case 'Very High': return 'var(--accent-color)'
                                case 'High': return 'var(--primary-color)'
                                case 'Medium': return 'rgba(var(--rgb-primary-color), .75)'
                                case 'Low': return 'rgba(var(--rgb-primary-color), .5)'
                                case 'Very Low': 'rgba(var(--rgb-primary-color), .25)'
                                default: return 'var(--ha-card-background)'
                              }
                            ]]]
                      label:
                        - text-transform: capitalize

                  - type: 'custom:button-card'
                    template: live_tile
                    entity: sensor.valhalla_uv_index
                    name: UV
                    icon: mdi:sun-wireless-outline
                    label: '[[[ return entity.attributes.level ]]]'
                    state_display: '[[[ return entity.state.split(" ") ]]]'
                    styles:
                      card:
                        - color: |
                            [[[
                              if (entity.state == 0) { return 'var(--disabled-text-color)' }
                              switch(entity.attributes.level) {
                                case 'Low': return 'var(--primary-text-color)'
                                default: return 'var(--text-accent-color)'
                              }
                            ]]]
                        - background: |
                            [[[
                              if (entity.state == 0) { return 'var(--ha-card-background)' }
                              switch(entity.attributes.level) {
                                case 'Very High': return 'var(--accent-color)'
                                case 'High': return 'var(--primary-color)'
                                case 'Moderate': return 'rgba(var(--rgb-primary-color), .5)'
                                case 'Low': return 'rgba(var(--rgb-primary-color), .25)'
                                default: return 'var(--ha-card-background)'
                              }
                            ]]]

                  - type: 'custom:button-card'
                    template: live_tile_with_unit
                    entity: sensor.valhalla_wind
                    name: '[[[ return states["sensor.wind_strength"].state ]]]'
                    icon: 'mdi:navigation'
                    label: '[[[ return states["sensor.wind_direction"].state ]]]'
                    state_display: '[[[ return Math.round(parseFloat(states["sensor.valhalla_wind"].state) * 0.6213712 * 10) / 10 ]]]'
                    custom_fields:
                      unit: MPH
                    styles:
                      grid:
                        - background: var(--ha-card-background)
                      card:
                        - background: |
                            [[[
                              var wind_speed_mph = parseFloat(states["sensor.valhalla_wind"].state) * 0.6213712
                              if (wind_speed_mph <= 30) { return "transparent" }
                              if (wind_speed_mph <= 54) {
                                return "rgba(var(--rgb-primary-color)," + (wind_speed_mph / 54) + ")"
                              } else {
                                return "var(--accent-color)"
                              }
                            ]]]
                      icon:
                        - transform: '[[[ return "rotate(" + parseFloat(states["weather.valhalla_hourly"].attributes.wind_bearing) + "deg)" ]]]'


                  - type: 'custom:auto-entities'
                    filter:
                      template: |
                        {% for alert in range(0,states('sensor.nws_alert_rss_feed')|int) -%}
                          {{
                            { 'entity': 'sensor.nws_alert_rss_feed',
                              'type': 'custom:button-card',
                              'template': ['live_tile_card', 'live_tile_with_long_state', 'nws_alerts'],
                              'variables': {
                                'slide': alert
                              },
                            }
                          }},
                        {%- endfor %}
                    show_empty: false
                    card:
                      type: 'custom:swipe-card'
                      parameters:
                        direction: vertical
                        autoHeight: true
                        height: 112
                        effect: cube
                        autoplay:
                          delay: 5000
                        loop: true
                        cubeEffect:
                          - slideShadows: false
                    card_param: cards
                    view_layout:
                      show:
                        mediaquery: "(max-width: 1128px)"

                  - type: 'custom:auto-entities'
                    filter:
                      template: |
                        {% for alert in range(0,states('sensor.nws_alert_rss_feed')|int) -%}
                          {{
                            { 'entity': 'sensor.nws_alert_rss_feed',
                              'type': 'custom:button-card',
                              'template': ['live_tile_card', 'live_tile_with_long_state', 'nws_alerts'],
                              'variables': {
                                'slide': alert,
                                'aspect_ratio': 2
                              },
                            }
                          }},
                        {%- endfor %} 
                    show_empty: false
                    card:
                      type: 'custom:swipe-card'
                      parameters:
                        direction: vertical
                        autoHeight: true
                        height: 112
                        effect: cube
                        autoplay:
                          delay: 5000
                        loop: true
                        cubeEffect:
                          - slideShadows: false
                    card_param: cards
                    view_layout:
                      grid-column: span 2
                      show:
                        mediaquery: "(min-width: 1128px)"



              # [Column] Neighborhood

              - type: 'custom:layout-card'
                layout_type: 'custom:grid-layout'
                cards:

                  - type: 'custom:button-card'
                    template: header_card
                    variables:
                      name: NEIGHBORHOOD
                      label: More
                      link: /ui-dashboard/neighborhood
                    view_layout:
                      grid-column: 1/-1

                  - type: 'custom:button-card'
                    view_layout:
                      grid-column: span 2
                    variables:
                      aspect_ratio: 2
                    template:
                      - live_tile_card
                      - live_tile_with_long_state
                    entity: sensor.mta_subway_l_service_status
                    state_display: >-
                      [[[ 
                        if (( entity.state == 'No Data' ) || ( entity.state == 'unavailable')) { return 'No Data' }
                        return ((entity.attributes.direction_statuses != undefined) ? entity.attributes.direction_statuses.north : entity.state)
                      ]]]
                    name: L Train Northbound
                    icon: 'mdi:train'
                    label: |-
                      [[[ 
                        if (( entity.state == 'No Data' ) || ( entity.state == 'unavailable')) { return '' }
                        if ( entity.state == 'No Service') {
                          var label = entity.attributes.service_change_summaries.both[0] 
                        } else {
                          var label = ((entity.attributes.service_change_summaries.north.length > 0) ? entity.attributes.service_change_summaries.north[0] : '') +
                            ((entity.attributes.delay_summaries.north != null) ? entity.attributes.delay_summaries.north : '') +
                            ((entity.attributes.service_irregularity_summaries.north != null) ? entity.attributes.service_irregularity_summaries.north : '') +
                            ((entity.attributes.service_change_summaries.both.length > 0) ? entity.attributes.service_change_summaries.both[0] : '') }
                        if ((label !== undefined) || (label !== null)) { return label.charAt(0).toUpperCase() + label.slice(1) }
                      ]]]
                    state:
                      - value: Slow
                        styles:
                          card:
                            - background: rgba(var(--rgb-primary-color), .33)
                            - color: var(--primary-text-color)
                      - value: 'Not Good'
                        color: 'rgba(var(--rgb-primary-color), .5)'
                      - value: No Service
                        color: var(--accent-color)
                      - value: Service Change
                        color: var(--accent-color)
                      - value: Delay
                        color: var(--primary-color)
                      - value: No Data
                        color: var(--primary-color)
                      - value: Good Service
                        styles:
                          card:
                            - background: var(--ha-card-background)
                            - color: var(--disabled-text-color)

                  - type: 'custom:swipe-card'
                    parameters:
                      direction: vertical
                      autoHeight: true
                      height: 112
                      effect: cube
                      autoplay:
                        delay: 15000
                      cubeEffect:
                        - slideShadows: false
                    cards:

                      - &summary-card-notify-nyc
                        type: 'custom:button-card'
                        variables:
                          aspect_ratio: 2/1
                          slide: 0
                        template:
                          - live_tile_card
                          - live_tile_with_long_state
                        name: >-
                          [[[ return "Notify NYC - " + moment(entity.attributes.entries[variables.slide].published).fromNow()
                          ]]]
                        entity: sensor.notify_nyc
                        color: var(--ha-card-background)
                        state_display: >-
                          [[[ return
                          entity.attributes.entries[variables.slide].title.replace("Notify NYC
                          - ", "") ]]]
                        label: >-
                          [[[ return
                          entity.attributes.entries[variables.slide].summary.replace(/Notification
                          issued .*/g, "").replace(/For more information, .*/g,
                          "").replace(/To view this message in.*/g, "") ]]]
                        styles:
                          card:
                            - color: |
                                [[[
                                  var diff = (new Date() - new Date(entity.attributes.entries[variables.slide].published)) / 1000
                                  if (diff > 14472) { return "var(--primary-text-color)" } else { return "var(--accent-text-color)" }
                                ]]]
                            - background-image: |
                                [[[
                                  var diff = (new Date() - new Date(entity.attributes.entries[variables.slide].published)) / 1000
                                  var opacity = 1 - (diff / 21600)
                                  if (diff > 21600) { return '' }
                                  return 'linear-gradient( to top, rgba(var(--rgb-primary-color),' + opacity + ') 0%, rgba(var(--rgb-primary-color),' + opacity + ') 100%)'
                                ]]]

                      # This is so fucking clever I have to pat myself in the back here.
                      - <<: *summary-card-notify-nyc
                        variables:
                          aspect_ratio: 2/1
                          slide: 1

                      - <<: *summary-card-notify-nyc
                        variables:
                          aspect_ratio: 2/1
                          slide: 2

                      - <<: *summary-card-notify-nyc
                        variables:
                          aspect_ratio: 2/1
                          slide: 3

                      - <<: *summary-card-notify-nyc
                        variables:
                          aspect_ratio: 2/1
                          slide: 4

                    view_layout:
                      grid-column: 1/3
                      grid-row: 3/4

                  # Force fix for the height of the swipe card tile above.
                  - type: 'custom:button-card'
                    template: live_tile
                    styles:
                      card:
                        - background: none
                    view_layout:
                      grid-column: 1/1
                      grid-row: 3/4

                  - type: 'custom:decluttering-card'
                    template: mini_graph_tile
                    variables:
                      - entities:
                          - entity: sensor.gasbuddy_average_gas_price
                      - title: Avg Gas Price
                      - decimals: 2

                  - type: 'custom:button-card'
                    template:
                      - live_tile_card
                      - live_tile_with_long_state
                    name: Parking Rules
                    entity: sensor.nyc_311_alternate_side_parking_0d
                    icon: mdi:car
                    label: |
                      [[[ return entity.attributes.details ]]]
                    state:
                      - value: 'In Effect'
                        color: var(--ha-card-background)
                        styles:
                          card:
                            - background: var(--ha-card-background)
                            - color: var(--disabled-text-color)
                      - operator: 'default'
                        color: var(--primary-color)

                  - type: 'custom:decluttering-card'
                    template: mini_graph_tile
                    variables:
                      - entities:
                          - entity: sensor.waze_travel_time
                      - title: Driving Time

                  - type: 'custom:button-card'
                    template:
                      - live_tile_with_camera
                    name: Traffic
                    entity: camera.bing_maps_traffic
                    show_state: false
                    variables:
                      picture: '[[[ return entity.attributes.entity_picture ]]]'

                layout:
                  grid-template-columns: 'repeat(auto-fill, [col-start] minmax(112px, 1fr) [col-end])'
                  margin: 0


              # [Column] Media

              - type: 'custom:layout-card'
                layout_type: 'custom:grid-layout'
                layout:
                  grid-template-columns: >-
                    repeat(auto-fill, [col-start] minmax(112px, 1fr)
                    [col-end])
                  grid-auto-flow: row dense
                  margin: -1
                cards:

                  - type: 'custom:button-card'
                    template: header_card
                    variables:
                      name: MEDIA
                      label: More
                      link: /ui-machines/media
                    view_layout:
                      grid-column: 1/-1

                  - type: custom:layout-card
                    layout_type: custom:grid-layout
                    layout:
                      grid-template-columns: 1fr 1fr
                      grid-template-rows: 1fr
                      margin: 0
                    view_layout:
                      grid-column: 1/3
                      grid-row: 2/3
                    cards:
                        
                      - type: 'custom:auto-entities'
                        filter:
                          include:
                            - domain: media_player
                              state: playing
                              options:
                                type: 'custom:button-card'
                                template: live_tile_media_player
                                entity: this.entity_id
                            - domain: media_player
                              state: paused
                              options:
                                type: 'custom:button-card'
                                template: live_tile_media_player
                                entity: this.entity_id
                        show_empty: false
                        card:
                          type: 'custom:swipe-card'
                          parameters:
                            direction: vertical
                            autoHeight: true
                            height: 112
                            effect: cube
                            autoplay:
                              delay: 5000
                            cubeEffect:
                              - slideShadows: false
                        card_param: cards
                        view_layout:
                          grid-column: 1/3
                          grid-row: 1/2

                      # Force fix for the height of the swipe card tile above. Even harder than the previous one.
                      - type: 'custom:button-card'
                        template: live_tile
                        triggers_update: all
                        styles:
                          card:
                            - display: >-
                                [[[
                                  var mediaPlaying = Object.keys(states).filter(e => e.includes("media") && (states[e].state == "playing")).length
                                  var mediaPaused = Object.keys(states).filter(e => e.includes("media") && (states[e].state == "paused")).length
                                  if (mediaPlaying + mediaPaused > 0) { return 'block' } else { return 'none' }
                                ]]]
                            - background: none
                        view_layout:
                          grid-column: 1/1
                          grid-row: 1/2

                  - type: 'custom:decluttering-card'
                    template: mini_graph_tile
                    variables:
                      - entities:
                          - entity: sensor.my_last_fm_play_count
                      - title: Last.fm
                      - icon: 'mdi:music'
                      - hours_to_show: 48
                      - lower_bound: ~100000

                  - type: 'custom:button-card'
                    variables:
                      newest: |
                        [[[
                          var movieUpdate = new Date(states["sensor.dorothy_library_movies"].attributes.last_added_timestamp)
                          var tvUpdate = new Date(states["sensor.dorothy_library_tv_shows"].attributes.last_added_timestamp)
                          var flacUpdate = new Date(states["sensor.dorothy_library_flacs"].attributes.last_added_timestamp)
                          if (flacUpdate > movieUpdate) {
                            if (flacUpdate > tvUpdate) { return "flacs" } else {return "tv_shows" }
                          } else {
                            if (movieUpdate > tvUpdate) { return "movies" } else {return "tv_shows" }
                          }
                        ]]]
                    template:
                      - live_tile_card
                      - live_tile_with_longer_state
                    name: New to Plex
                    icon: 'mdi:plex'
                    entity: sensor.dorothy_library_flacs
                    state_display: >-
                      [[[ return states["sensor.dorothy_library_" +
                      variables.newest].attributes.last_added_item ]]]
                    label: |-
                      [[[ 
                        var diff = (-(new Date(states["sensor.dorothy_library_" +
                          variables.newest].attributes.last_added_timestamp) - new Date()) /
                          1000 / 60 / 60 / 24)
                        if (diff > 1.5) {return Math.round(diff)  + " days ago" }
                        if (diff < .03) {return "Just now" }
                        if (diff <= 1.5) {return Math.round(diff * 24)  + " hours ago" }

                      ]]]
                    styles:
                      card:
                        - background: var(--ha-card-background)
                        - color: var(--primary-text-color)
                      state:
                        - display: '-webkit-box'
                        - '-webkit-line-clamp': 3
                        - '-webkit-box-orient': vertical

                  - type: 'custom:swipe-card'
                    parameters:
                      direction: vertical
                      autoHeight: true
                      height: 112
                      effect: cube
                      autoplay:
                        delay: 60000
                      cubeEffect:
                        - slideShadows: false
                    view_layout:
                      grid-column: span 2
                    cards:

                      - type: 'custom:button-card'
                        template:
                          - live_tile_card
                          - live_tile_with_long_state
                        entity: sensor.last_fm_top_artists
                        icon: 'mdi:album'
                        name: >-
                          [[[ return
                          states["sensor.last_fm_top_artists_json"].attributes.artist[0].playcount
                          + " plays" ]]]
                        label: >
                          [[[ return
                          states["sensor.last_fm_top_artists"].attributes.artist_2
                          + "<br/>" + 
                          states["sensor.last_fm_top_artists"].attributes.artist_3
                          + "<br/>" + 
                          states["sensor.last_fm_top_artists"].attributes.artist_4
                          + "<br/>" + 
                          states["sensor.last_fm_top_artists"].attributes.artist_5
                          ]]]
                        variables:
                          aspect_ratio: 2/1
                        styles:
                          card:
                            - color: var(--primary-text-color)
                            - background-size: cover
                            - background-image: >
                                [[[ return "linear-gradient(to bottom, rgba(var(--rgb-primary-background-color), .5), rgba(var(--rgb-primary-background-color), .5)), url('" + 
                                  states["sensor.last_fm_top_artist_photo"].state + "')" ]]]

                      - type: 'custom:button-card'
                        template:
                          - live_tile_card
                          - live_tile_with_long_state
                        entity: sensor.last_fm_top_albums
                        icon: 'mdi:album'
                        name: >-
                          [[[ return
                          states["sensor.last_fm_top_albums_json"].attributes.album[0].playcount
                          + " plays" ]]]
                        label: >
                          [[[ return
                          states["sensor.last_fm_top_albums"].attributes.album_2
                          + "<br/>" + 
                          states["sensor.last_fm_top_albums"].attributes.album_3
                          + "<br/>" + 
                          states["sensor.last_fm_top_albums"].attributes.album_4
                          + "<br/>" + 
                          states["sensor.last_fm_top_albums"].attributes.album_5
                          ]]]
                        variables:
                          aspect_ratio: 2/1
                        styles:
                          card:
                            - color: var(--primary-text-color)
                            - background-size: cover
                            - background-image: >
                                [[[ return "linear-gradient(to bottom, rgba(var(--rgb-primary-background-color), .5), rgba(var(--rgb-primary-background-color), .5)), url('" + 
                                  states["sensor.last_fm_top_albums"].attributes.album_1_image + "')" ]]]

                      - type: 'custom:button-card'
                        template:
                          - live_tile_card
                          - live_tile_with_long_state
                        entity: sensor.last_fm_top_tracks
                        icon: 'mdi:album'
                        name: >-
                          [[[ return
                          states["sensor.last_fm_top_tracks_json"].attributes.track[0].playcount
                          + " plays" ]]]
                        label: >
                          [[[ return
                          states["sensor.last_fm_top_tracks"].attributes.track_2
                          + "<br/>" + 
                          states["sensor.last_fm_top_tracks"].attributes.track_3
                          + "<br/>" + 
                          states["sensor.last_fm_top_tracks"].attributes.track_4
                          + "<br/>" + 
                          states["sensor.last_fm_top_tracks"].attributes.track_5
                          ]]]
                        variables:
                          aspect_ratio: 2/1
                        styles:
                          card:
                            - color: var(--primary-text-color)
                            - background: var(--ha-card-background)


              # [Column] Astrometrics

              - type: 'custom:layout-card'
                layout_type: 'custom:grid-layout'
                cards:
                  - type: 'custom:button-card'
                    template: header_card
                    variables:
                      name: ASTROMETRICS
                      label: More
                      link: /ui-dashboard/astrometrics
                    view_layout:
                      grid-column: 1/-1

                  - type: 'custom:mod-card'
                    card_mod:
                      style: 'ha-card { margin: -1px !important; }'
                    card:

                      type: 'custom:layout-card'
                      layout_type: 'custom:grid-layout'
                      layout:
                        margin: 0
                      cards:

                        - type: 'custom:button-card'
                          template: live_tile_card
                          entity: sun.sun
                          show_name: false
                          show_icon: false
                          color_type: icon
                          variables:
                            aspect_ratio: 3/1
                          state_display: |-
                            [[[
                              if (entity.attributes.elevation >= 0) {
                                var diff = -(new Date() - new Date(entity.attributes.next_setting)) / 1000 / 60 / 60
                                if (diff > 1.5) {
                                  return Math.round(diff) + "<span style='font-size: var(--h6-font-size); font-weight: 500; opacity: .5;'> HR</span>"
                                } else {
                                  return Math.round(diff * 60) + "<span style='font-size: var(--h6-font-size); font-weight: 500; opacity: .5;'> MIN</span>"
                                }
                              } else {
                                var diff = -(new Date() - new Date(entity.attributes.next_rising)) / 1000 / 60 / 60
                                if (diff > 1.5) {
                                  return Math.round(diff) + "<span style='font-size: var(--h6-font-size); font-weight: 500; opacity: .5;'> HR</span>"
                                } else {
                                  return Math.round(diff * 60) + "<span style='font-size: var(--h6-font-size); font-weight: 500; opacity: .5;'> MIN</span>"
                                }
                              }
                            ]]]

                        - type: 'custom:sun-card'
                          style: >
                            ha-card { aspect-ratio: 3/1; margin-top: -2px; }

                            .sun-card {padding: 0 !important; }

                            .sun-card-header, .sun-card-footer {display: none
                            !important; }

                            .sun-card-body { padding-top: 0 !important;}

                        - type: 'custom:button-card'
                          template: live_tile
                          entity: sun.sun
                          show_state: false
                          show_icon: false
                          variables:
                            aspect_ratio: 3/1
                          name: |-
                            [[[
                              if (entity.attributes.elevation >= 0) {
                                return "To Sunset"
                              } else {
                                return "To Sunrise"
                              }
                            ]]]
                          label: |-
                            [[[
                              if (entity.attributes.elevation >= 0) {
                                var time = new Date(entity.attributes.next_setting)
                                return time.toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' })
                              } else {
                                var time = new Date(entity.attributes.next_rising)
                                return time.toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' })
                              }
                            ]]]
                          styles:
                            card:
                              - margin-top: '-2px'

                  - type: 'custom:button-card'
                    template: live_tile
                    entity: sensor.moon
                    name: '[[[ return entity.state.replace("_", " ") ]]]'
                    show_state: false

                  - type: 'custom:decluttering-card'
                    template: mini_graph_tile
                    variables:
                      - entities:
                        - entity: sensor.noaa_space_weather_solar_wind_speed
                      - title: Solar Wind Speed
                      - icon: mdi:weather-windy

                  - type: 'custom:button-card'
                    template: live_tile
                    entity: binary_sensor.iss
                    name: ISS
                    icon: mdi:space-station
                    show_state: false
                    # state_display: '[[[ return entity.attributes.number_of_people_in_space ]]]'
                    show_label: true
                    label: '[[[ return moment(entity.attributes.next_rise).format("HH:mm") ]]]'
                    # custom_fields:
                    #  unit: People
                    styles:
                      card:
                        - background: |
                            [[[
                              return "url('https://dev.virtualearth.net/REST/v1/Imagery/Map/CanvasDark/" + entity.attributes.latitude + "," + entity.attributes.longitude + "/3?mapSize=400,400&format=png&key=X')"
                            ]]]
                        - background-size: 120% 120%
                        - background-position: center center

                  # - type: map
                  #   entities:
                  #     - entity: binary_sensor.iss
                  #   default_zoom: 0.25
                  #   hours_to_show: 12
                  #   card_mod:
                  #     style:
                  #       .: |
                  #         ha-icon-button { display: none; }
                  #       ha-map$: |
                  #         .leaflet-control-container { display: none; }
                  #       ha-map$ha-entity-marker$: >
                  #         .marker { width: 8px !important; height: 8px !important; margin-top:
                  #         20px; margin-left: 20px; border: 0 !important; background-color: var(--primary-color) !important; color: transparent !important; }

                  - type: 'custom:swipe-card'
                    parameters:
                      direction: vertical
                      autoHeight: true
                      height: 112
                      effect: cube
                      autoplay:
                        delay: 15000
                      cubeEffect:
                        - slideShadows: false
                    cards:

                      - &summary-card-noaa-space-weather
                        type: 'custom:button-card'
                        variables:
                          aspect_ratio: 2/1
                          slide: 0
                        template:
                          - live_tile_card
                          - live_tile_with_long_state
                        entity: sensor.noaa_space_weather_alert_1
                        name: '[[[ return entity.state + " &bull; " + entity.attributes.summary.split(": ")[0] + " &bull; " + moment(entity.attributes.date).subtract(5, "h").fromNow() ]]]'
                        state_display: '[[[ return entity.attributes.summary.split(": ")[1] ]]]'
                        label: '[[[ return entity.attributes.potential_impacts ]]]'
                        color: var(--ha-card-background)
                        icon: mdi:alert-octagram
                        styles:
                          card:
                            - color: |
                                [[[
                                  var diff = (new Date() - new Date(entity.attributes.date)) / 1000
                                  if (diff > 57888) { return "var(--primary-text-color)" } else { return "var(--accent-text-color)" }
                                ]]]
                            - background-image: |
                                [[[
                                  var diff = (new Date() - new Date(entity.attributes.date)) / 1000
                                  var opacity = 1 - (diff / 86400)
                                  if (diff > 86400) { return '' }
                                  return 'linear-gradient( to top, rgba(var(--rgb-primary-color),' + opacity + ') 0%, rgba(var(--rgb-primary-color),' + opacity + ') 100%)'
                                ]]]

                      - <<: *summary-card-noaa-space-weather
                        entity: sensor.noaa_space_weather_alert_2
                        variables:
                          aspect_ratio: 2/1

                      - <<: *summary-card-noaa-space-weather
                        entity: sensor.noaa_space_weather_alert_3
                        variables:
                          aspect_ratio: 2/1

                      - <<: *summary-card-noaa-space-weather
                        entity: sensor.noaa_space_weather_alert_4
                        variables:
                          aspect_ratio: 2/1

                      - <<: *summary-card-noaa-space-weather
                        entity: sensor.noaa_space_weather_alert_5
                        variables:
                          aspect_ratio: 2/1

                    view_layout:
                      grid-column: span 2

                layout:
                  grid-template-columns: 'repeat(auto-fill, [col-start] minmax(112px, 1fr) [col-end])'
                  margin: 0



# [Pop Up Cards]
popup_cards:
  sensor.octoprint_current_state:
    title: Genesis
    card: !include machines/genesis-cards.yaml
    style:
      .: |
        :host .content { width: 75vw; height: 75vh; }
        @media (max-width: 1100px) { :host .content { width: 100vw; height: 100vh; } }

  media_player.terpsichora:
    title: Terpsichora
    card: !include machines/terpsichora-cards.yaml
    style:
      .: |
        :host .content { width: 75vw; height: 75vh; }
        @media (max-width: 1100px) { :host .content { width: 100vw; height: 100vh; } }

  sensor.dorothy_intel_core_i5_750_load_cpu_total:
    title: Dorothy
    card: !include machines/illinoise-cards.yaml
    style:
      .: |
        :host .content { width: 75vw; height: 75vh; }
        @media (max-width: 1100px) { :host .content { width: 100vw; height: 100vh; } }

  sensor.unison_processor_use:
    title: Unison
    card: !include machines/unison-cards.yaml
    style:
      .: |
        :host .content { width: 75vw; height: 75vh; }
        @media (max-width: 1100px) { :host .content { width: 100vw; height: 100vh; } }

  sensor.dorothy_library_flacs:
    title: Plex Library
    card:   
      type: 'custom:layout-card'
      layout_type: 'custom:grid-layout'
      layout:
        margin: 17px
      cards:
        - !include machines/illinoise-plex-library.yaml
    style:
      .: |
        :host .content { width: 75vw; height: 75vh; }
        @media (max-width: 1100px) { :host .content { width: 100vw; height: 100vh; } }

  sensor.mta_subway_l_service_status:
    title: Transit
    card:
      type: custom:layout-card
      layout_type: custom:grid-layout
      layout:
        grid-template-columns: 'repeat(auto-fill, [col-start] minmax(352px, 1fr) [col-end])'
        grid-template-rows: auto
        grid-column-gap: 32px
        margin: 0
        padding: 0
        card_margin: 1px
      cards: !include secret/neighborhood-transit.yaml
    style:
      .: |
        :host .content { width: 75vw; padding: 0 32px 32px; }
        @media (max-width: 1100px) { :host .content { width: 100vw; padding: 0 32px 32px; } }

  sensor.nws_alert_rss_feed:
    title: NWS Alerts
    card: !include cards/nws-alerts.yaml
    style:
      .: |
        :host .content { width: 75vw; }
        @media (max-width: 1100px) { :host .content { width: 100vw; } }

  xtraffic_map:
    title: Traffic
    card:       
      type: picture
      image: !secret virtualearth_image_path
      tap_action:
        action: url
        url_path: !secret googlemaps_path
    style:
      .: |
        :host .content { width: 75vw; }
        @media (max-width: 1100px) { :host .content { width: 100vw; } }
